@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Lists
@using System.Collections.ObjectModel

@namespace DiagramBuilder

<style>
    .delete-icon::after {
        font-family: "e-icon";
        content: "\e700";
        float: right;
        cursor: pointer;
    }

    @@font-face {
        font-family: "e-icon";
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmXOniGAAAAcgAAAFAaGVhZBC1AhkAAADQAAAANmhoZWEIUQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQCgAAAAAAHAAAAABm1heHABDgCYAAABCAAAACBuYW1lv4Bt4QAAAwgAAAIZcG9zdJx8QW4AAAUkAAAAOwABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAApWcDV18PPPUACwQAAAAAANbRXpQAAAAA1tFelAAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAACAIwAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAoAAAAAIAAAAAA/QD9AALAIsAAAEHFwcnByc3JzcXNwUfHz8fLx8PHgLuhIRrg4NrhIRrg4P9iQECAwQGBwcJCwsMDQ4PDxEREhMUFBUWFhcXFxkYGRkaGhkZGBkXFxcWFhUUFBMSEREPDw4NDAsLCQcHBgQDAgEBAgMEBgcHCQsLDA0ODw8RERITFBQVFhYXFxcZGBkZGhoZGRgZFxcXFhYVFBQTEhERDw8ODQwLCwkHBwYEAwICg4OGa4SEa4ODaoCE7hoZGRgZFxcXFhYVFBQTEhERDw8ODQwLCwkHBwYEAwIBAQIDBAYHBwkLCwwNDg8PERESExQUFRYWFxcXGRgZGRoaGRkYGRcXFxYWFRQUExIREQ8PDg0MCwsJBwcGBAMCAQECAwQGBwcJCwsMDQ4PDxEREhMUFBUWFhcXFxkYGRkAAAASAN4AAQAAAAAAAAABAAAAAQAAAAAAAQAGAAEAAQAAAAAAAgAHAAcAAQAAAAAAAwAGAA4AAQAAAAAABAAGABQAAQAAAAAABQALABoAAQAAAAAABgAGACUAAQAAAAAACgAsACsAAQAAAAAACwASAFcAAwABBAkAAAACAGkAAwABBAkAAQAMAGsAAwABBAkAAgAOAHcAAwABBAkAAwAMAIUAAwABBAkABAAMAJEAAwABBAkABQAWAJ0AAwABBAkABgAMALMAAwABBAkACgBYAL8AAwABBAkACwAkARcgZGVsZXRlUmVndWxhcmRlbGV0ZWRlbGV0ZVZlcnNpb24gMS4wZGVsZXRlRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABkAGUAbABlAHQAZQBSAGUAZwB1AGwAYQByAGQAZQBsAGUAdABlAGQAZQBsAGUAdABlAFYAZQByAHMAaQBvAG4AIAAxAC4AMABkAGUAbABlAHQAZQBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIAB1AHMAaQBuAGcAIABTAHkAbgBjAGYAdQBzAGkAbwBuACAATQBlAHQAcgBvACAAUwB0AHUAZABpAG8AdwB3AHcALgBzAHkAbgBjAGYAdQBzAGkAbwBuAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAQIBAwARY2lyY2xlLWNsb3NlLS0tMDIAAAA=) format("truetype");
        font-weight: normal;
        font-style: normal;
    }

    #btnAdd {
        right: 16px;
        position: absolute;
    }

    #btnDuplicate {
        right: 14px;
        position: absolute;
    }

    #btnRemove {
        right: 12px;
        position: absolute;
    }

    #btnCloseLayer {
        right: 10px;
        position: absolute;
    }
</style>

<SfDialog @ref="@DialogBox" ID="layerDialog" Header="Layers" @bind-Visible="@IsVisible" Width="300px" Height="400px" IsModal="true" AllowDragging="true">
    <DialogTemplates>
        <Content>
            <div class="e-dlg-content" id="layerDialog_dialog-content">
                @{
                    string layerTemplateClass;
                    if (Parent != null && Parent.Parent!=null)
                    {
                        for (var i = Parent.Parent.DiagramContent.Diagram.Layers.Count; i > 0; i--)
                        {
                            var LayerText = Parent.Parent.DiagramContent.Diagram.Layers[i - 1].Id;
                            if (DataSource.Count == 0)
                            {
                                var random = new Random();
                                DataSource.Add(new ListDataModel
                                {
                                    Id = random.Next(100, 300).ToString(),
                                    Text = LayerText,
                                });
                            }
                            string text = DataSource[i - 1].Text;
                            if(SelectedItem != null && text == SelectedItem)
                                layerTemplateClass = "db-layer-template active";
                            else
                                layerTemplateClass = "db-layer-template";
                            <div class=@layerTemplateClass>
                                <div class="row">
                                    <div class="db-layer-content-name" style="width: calc(100% - 88px);" @onclick="(e => OnSelectedListItem(text))">
                                        <span class="db-layer-name default_layer">@text</span>
                                        <input type="text" class="db-layer-edit" />
                                    </div>
                                    <div class="db-layer-content-btn">
                                        <SfButton IconCss="sf-icon-Unlock" CssClass="db-layer-lock" @onclick="(e=> OnEnableLock(LayerText))"></SfButton>
                                    </div>
                                    <div class="db-layer-content-btn">
                                        <SfButton IconCss="sf-icon-View" CssClass="db-layer-visible" @onclick="(e=>OnEnableVisibility(LayerText))"></SfButton>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </Content>
        <FooterTemplate>
            <div class="db-layer-bottom-panel">
                <div class="row" style="margin-top: 6px;">
                    <div class="col-xs-2">
                        <SfButton ID="btnAdd" IconCss="sf-icon-Plus" CssClass="right:16px;position:absolute" OnClick="@BtnAddLayer"></SfButton>
                    </div>
                    <div class="col-xs-2">
                        <SfButton ID="btnDuplicate" IconCss="sf-icon-Copy" CssClass="right:14px;position:absolute" OnClick="@BtnDuplicateLayer"></SfButton>
                    </div>
                    <div class="col-xs-2">
                        <SfButton ID="btnRemove" IconCss="sf-icon-Delete" CssClass="right:12px;position:absolute" OnClick="@BtnRemoveLayer"></SfButton>
                    </div>
                    <div class="col-xs-2">
                        <SfButton ID="btnCloseLayer" IconCss="sf-icon-Close" CssClass="right:10px;position:absolute" OnClick="@BtnCloseDialog"></SfButton>
                    </div>
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>


@code {
    public bool IsVisible { get; set; } = false;

    public DiagramToolBar Parent;
    SfDialog DialogBox;
    ListDataModel SelectedData;

    ObservableCollection<ListDataModel> DataSource = new ObservableCollection<ListDataModel>();

    public class ListDataModel
    {
        public string Id { get; set; }
        public string Text { get; set; }
    }

    public System.Collections.ObjectModel.ObservableCollection<Syncfusion.Blazor.Diagrams.DiagramLayer> Layers;
    public string SelectedItem { get; set; }
    public async Task Show()
    {
        IsVisible = true;
        await DialogBox.Show();
        DataSource.Clear();
        var random = new Random();
        Layers = Parent.Parent.DiagramContent.Diagram.Layers;
        if (Layers != null)
        {
            foreach (Syncfusion.Blazor.Diagrams.DiagramLayer layer in Layers)
            {
                DataSource.Add(new ListDataModel
                {
                    Id = random.Next(100, 300).ToString(),
                    Text = layer.Id,
                });
            }
        }
        SelectedItem = DataSource[DataSource.Count - 1].Text;
        SelectedData = DataSource[DataSource.Count-1];
        StateHasChanged();
    }


    #region Events

    private async Task OnSelectedListItem(string data)
    {
        SelectedItem = data;
        int i = 0;
        foreach(ListDataModel model in DataSource)
        {
            if(data == model.Text)
            {
                SelectedData = model;
                i++;
                break;
            }
            i++;
        }
        await Parent.Parent.DiagramContent.Diagram.SetActiveLayer(Parent.Parent.DiagramContent.Diagram.Layers[i - 1].Id);
    }
    private void OnEnableVisibility(string layerId)
    {
        //DataSource.RemoveAt(DataSource.ToList<ListDataModel>().FindIndex(e => e.Id == listDataModel.Id));
        foreach (Syncfusion.Blazor.Diagrams.DiagramLayer layer in Parent.Parent.DiagramContent.Diagram.Layers)
        {
            if (layer.Id == layerId)
            {
                if (!layer.Visible)
                    layer.Visible = true;
                else
                    layer.Visible = false;
            }
        }
        StateHasChanged();
    }

    private void OnEnableLock(string layerId)
    {
        //DataSource.RemoveAt(DataSource.ToList<ListDataModel>().FindIndex(e => e.Id == listDataModel.Id));
        foreach (Syncfusion.Blazor.Diagrams.DiagramLayer layer in Parent.Parent.DiagramContent.Diagram.Layers)
        {
            if (layer.Id == layerId)
            {
                if (!layer.Lock)
                    layer.Lock = true;
                else
                    layer.Lock = false;
            }
        }
        StateHasChanged();
    }


    private void BtnAddLayer(MouseEventArgs args)
    {
        Syncfusion.Blazor.Diagrams.DiagramLayer layer = new Syncfusion.Blazor.Diagrams.DiagramLayer()
        {
            Id = "Untitled_Layer" + Parent.Parent.DiagramContent.Diagram.Layers.Count.ToString(),
            AddInfo = new Dictionary<string, object>() { { "name", "Untitled_Layer" + Parent.Parent.DiagramContent.Diagram.Layers.Count.ToString() } }
        };
        var random = new Random();
        DataSource.Add(new ListDataModel()
        {
            Id = random.Next(100, 300).ToString(),
            Text = layer.Id,
        });
        SelectedItem = DataSource[DataSource.Count-1].Text;
        SelectedData = DataSource[DataSource.Count-1];
        Parent.Parent.DiagramContent.Diagram.AddLayer(layer);
    }

    private async Task BtnDuplicateLayer(MouseEventArgs args)
    {
        Syncfusion.Blazor.Diagrams.DiagramLayer activelayer = await Parent.Parent.DiagramContent.Diagram.GetActiveLayer();
        //string name = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, object>>(activelayer.AddInfo.ToString())["name"].ToString();
        await Parent.Parent.DiagramContent.Diagram.CloneLayer(activelayer.Id);
        Syncfusion.Blazor.Diagrams.DiagramLayer clonelayer = Parent.Parent.DiagramContent.Diagram.Layers[Parent.Parent.DiagramContent.Diagram.Layers.Count - 1];
        clonelayer.AddInfo = new Dictionary<string, object>() { { "name", activelayer.Id + " Copy" } };

        var random = new Random();
        DataSource.Add(new ListDataModel()
        {
            Id = random.Next(100, 300).ToString(),
            Text = activelayer.Id + " Copy",
        });
        StateHasChanged();
    }

    private void BtnRemoveLayer(MouseEventArgs args)
    {
        Syncfusion.Blazor.Diagrams.DiagramLayer selectedLayer = null;
        foreach (Syncfusion.Blazor.Diagrams.DiagramLayer layer in Parent.Parent.DiagramContent.Diagram.Layers)
        {
            if (SelectedData.Text == layer.Id)
            {
                selectedLayer = layer;
                break;
            }
        }
        if (selectedLayer != null && DataSource.Count > 0)
        {
            Parent.Parent.DiagramContent.Diagram.Layers.Remove(selectedLayer);
            DataSource.RemoveAt(DataSource.ToList<ListDataModel>().FindIndex(e => e.Id == SelectedData.Id));
            if (DataSource.Count > 0)
            {
                SelectedData = DataSource[DataSource.Count - 1];
                SelectedItem = DataSource[DataSource.Count - 1].Text;
            }
        }
        StateHasChanged();
    }

    private async Task BtnCloseDialog(MouseEventArgs args)
    {
        IsVisible = false;
        await DialogBox.Hide();
        StateHasChanged();
    }

    #endregion


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var random = new Random();
            if (Layers != null)
            {
                foreach (Syncfusion.Blazor.Diagrams.DiagramLayer layer in Layers)
                {
                    DataSource.Add(new ListDataModel
                    {
                        Id = random.Next(100, 300).ToString(),
                        Text = layer.Id,
                    });
                }
                SelectedItem = DataSource[DataSource.Count-1].Text;
                SelectedData = DataSource[DataSource.Count-1];
            }
        }
        StateHasChanged();
    }
}

