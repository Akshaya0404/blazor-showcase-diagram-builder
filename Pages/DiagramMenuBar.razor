@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Diagrams;
@using System.Collections.ObjectModel;
@using Syncfusion.Blazor.SplitButtons;

@inject IJSRuntime jsRuntime
@namespace DiagramBuilder

<div class="db-header-container">
    <div class="db-diagram-name-container">
        <span id='diagramName' style="width:250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" class="db-diagram-name"
              onclick="renameDiagram(event)">Untitled Diagram</span>
        <h1 style="visibility: hidden">SYNCFUSION BLAZOR DIAGRAM BUILDER</h1>
        <input id='diagramEditable' type="text" class="db-diagram-name" onkeydown="diagramNameKeyDown(event)" onfocusout="diagramNameChange(event)" />
        <span id='diagramreport' class="db-diagram-name db-save-text"></span>
    </div>
    <div class="db-menu-container">
        <SfDropDownButton @ref="FileButton" Id ="btnFileMenu" Content="File" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="FileMenuItems" TValue="ContextMenuItemModel">
                    <MenuFieldSettings Text="Content"></MenuFieldSettings>
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected="@MenuClick"></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
        <SfDropDownButton  @ref="EditButton" Id ="btnEditMenu" Content="Edit" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownfileOpenButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="EditMenuItems" TValue="ContextMenuItemModel">
                    <MenuFieldSettings Text="Content"></MenuFieldSettings>
                  <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected="@MenuClick"></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
        <SfDropDownButton @ref="ViewButton" Id ="btnViewMenu" Content="View" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownViewButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="ViewMenuItems">
                    <MenuFieldSettings Text="Content"></MenuFieldSettings>
                   <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected="@MenuClick"></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
        <SfDropDownButton @ref="ArrangeButton" Id ="btnArrangeMenu" Content="Arrange" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownArrangeButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="ArrangeMenuItems">
                    <MenuFieldSettings Text="Content"></MenuFieldSettings>
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected="@MenuClick"></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
        <SfDropDownButton @ref="WindowButton"  Id ="btnWindowMenu" Content="Window" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownWindowButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="WindowMenuItems" >
                    <MenuFieldSettings Text="Content"></MenuFieldSettings>
                   <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected="@MenuClick"></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>

        <SfUploader @ref="@UploadFiles" Id ="defaultfileupload" ShowFileList="false" AllowedExtensions="@ExtensionType">
            <UploaderEvents Success="@OnUploadSuccess" OnUploadStart="@OnUploadFileSelected"></UploaderEvents>
            <UploaderAsyncSettings SaveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save" RemoveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove"></UploaderAsyncSettings>
        </SfUploader>
        <DiagramEditTooltipDialog @ref="@EditTooltip"></DiagramEditTooltipDialog>
        <DiagramSaveDialog @ref="@SaveDialogBox"></DiagramSaveDialog>
        <DiagramExportDialog @ref="ExportDialogBox"></DiagramExportDialog>
        <DiagramPrintDialog @ref="PrintDialogBox"></DiagramPrintDialog>
    </div>
</div>

@code {

    internal DiagramMain Parent;
    DiagramPrintDialog PrintDialogBox;
    DiagramExportDialog ExportDialogBox;
    DiagramSaveDialog SaveDialogBox;
    DiagramEditTooltipDialog EditTooltip;
    SfDropDownButton WindowButton;
    SfDropDownButton ArrangeButton;
    SfDropDownButton ViewButton;
    SfDropDownButton EditButton;
    SfDropDownButton FileButton;
    Syncfusion.Blazor.Inputs.SfUploader UploadFiles;
    string ExtensionType = ".png, .jpg, .jpeg";
    SfContextMenu<ContextMenuItemModel> ContextMenu;
    private List<string> DisableCollection;
    private void DropDownButtonOpen() {
        this.ItemSelection();
        for (int i = 0; i < FileMenuItems.Count; i++)
        {
            if (DisableCollection.IndexOf(FileMenuItems[i].Content) > -1)
            {
                FileMenuItems[i].Disabled = true;
            }
            else
            {

                FileMenuItems[i].Disabled = false;
            }
        }
    }
    public void OnMenuCreated()
    {
        ContextMenu.Open();
    }
    private void DropDownfileOpenButtonOpen()
    {
        this.ItemSelection();
        for(int i =0; i<EditMenuItems.Count; i++)
        {
            if(DisableCollection.IndexOf(EditMenuItems[i].Content) > -1)
            {
                EditMenuItems[i].Disabled = true;
            }
            else {

                EditMenuItems[i].Disabled = false;
            }
        }

    }
    private void DropDownViewButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < ViewMenuItems.Count; i++)
        {
            if (DisableCollection.IndexOf(ViewMenuItems[i].Content) > -1)
            {
                ViewMenuItems[i].Disabled = true;
            }
            else
            {

                ViewMenuItems[i].Disabled = false;
            }
        }
    }
    private void DropDownArrangeButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < ArrangeMenuItems.Count; i++)
        {
            if (DisableCollection.IndexOf(ArrangeMenuItems[i].Content) > -1)
            {
                ArrangeMenuItems[i].Disabled = true;
            }
            else
            {

                ArrangeMenuItems[i].Disabled = false;
            }
        }
    }
    private void DropDownWindowButtonOpen()
    {
        this.ItemSelection();
    }

    public class ContextMenuItemModel
    {
        public List<ContextMenuItemModel> Items { get; set; }
        public string Content { get; set; }
        public string Id { get; set; }
        public string IconCss { get; set; }
        public Boolean Separator { get; set; }
        public Boolean Disabled { get; set; }
    }
    private List<  ContextMenuItemModel> FileMenuItems = new List<  ContextMenuItemModel>{
                new   ContextMenuItemModel {Id ="FileMenuItemsNew", Content = "New" },
                new   ContextMenuItemModel {Id ="FileMenuItemsOpen", Content = "Open" },
                new   ContextMenuItemModel { Separator = true },
                new   ContextMenuItemModel { Id ="FileMenuItemsSave",Content = "Save", IconCss="sf-icon-Save" },
                new   ContextMenuItemModel { Id ="FileMenuItemsSaveAs",Content = "Save As" },
                new   ContextMenuItemModel {Id ="FileMenuItemsExport", Content = "Export", IconCss="sf-icon-Export" },
                new   ContextMenuItemModel { Separator = true},
                new   ContextMenuItemModel { Id ="FileMenuItemsPrint",Content = "Print",  IconCss="sf-icon-Print" }
            };

    private List<  ContextMenuItemModel> EditMenuItems = new List<  ContextMenuItemModel>{
                new   ContextMenuItemModel {Id ="EditMenuItemsUndo", Content= "Undo", IconCss="sf-icon-Undo" },
                new   ContextMenuItemModel { Id ="EditMenuItemsUndo",Content= "Redo", IconCss="sf-icon-Redo" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Id ="EditMenuItemsCut",Content= "Cut" },
                new   ContextMenuItemModel { Id ="EditMenuItemsCopy",Content= "Copy"},
                new   ContextMenuItemModel {Id ="EditMenuItemsPaste", Content= "Paste", IconCss="sf-icon-Paste" },
                new   ContextMenuItemModel {Id ="EditMenuItemsDelete", Content= "Delete", IconCss="sf-icon-Delete" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel {Id ="EditMenuItemsDuplicate", Content= "Duplicate"  },
                new   ContextMenuItemModel { Separator= true},
                new   ContextMenuItemModel { Id ="EditMenuItemsEditTooltip",Content= "Edit Tooltip" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Id ="EditMenuItemsSelectAll",Content= "Select All" },
            };
    private List<  ContextMenuItemModel> ViewMenuItems = new List<  ContextMenuItemModel>{
         new   ContextMenuItemModel { Id ="ViewMenuItemsZoomIn",Content="Zoom In", IconCss="sf-icon-ZoomIn" },
                new   ContextMenuItemModel { Id ="ViewMenuItemsZoomOut",Content="Zoom Out", IconCss="sf-icon-ZoomOut" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Content="Fit To Screen" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Content="Show Rulers" },
                new   ContextMenuItemModel { Content="Show Guides" ,IconCss="sf-icon-Selection"},
                new   ContextMenuItemModel { Content="Show Grid" ,IconCss="sf-icon-Selection"},
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Content="Snap To Grid" }
            };
    private List<  ContextMenuItemModel> ArrangeMenuItems = new List<  ContextMenuItemModel>
    {
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsSendToBack",Content="Send To Back", IconCss="sf-icon-Sendback" },
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsBringToFront",Content= "Bring To Front", IconCss="sf-icon-BringFront" },
                new   ContextMenuItemModel { Content="Send Backward", IconCss="sf-icon-SendBackward" },
                new   ContextMenuItemModel { Content="Bring Forward", IconCss="sf-icon-BringForward" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel
                {
                    Content = "Align Objects",
                    Items = new List<  ContextMenuItemModel>
    {
                        new   ContextMenuItemModel { Content="Left", IconCss="sf-icon-AlignLeft" },
                        new   ContextMenuItemModel { Content="Right", IconCss="sf-icon-AlignRight" },
                        new   ContextMenuItemModel { Content="Center", IconCss="sf-icon-AlignHorizontally" },
                        new   ContextMenuItemModel { Content="Top", IconCss="sf-icon-AilgnTop"},
                        new   ContextMenuItemModel { Content="Bottom", IconCss="sf-icon-AlignBottom" },
                        new   ContextMenuItemModel { Content="Middle", IconCss="sf-icon-AlignVertically" }
                    }
                },
                new   ContextMenuItemModel
                {
                    Content = "Distribute Objects",
                    Items = new List<  ContextMenuItemModel>
    {
                        new   ContextMenuItemModel {Content="Horizontally", IconCss="sf-icon-DistributeHorizontal" },
                        new   ContextMenuItemModel {Content="Vertically", IconCss="sf-icon-DistributeVertical" }
                    }
                },
                new   ContextMenuItemModel {
                    Content = "Match Size",
                    Items = new List<  ContextMenuItemModel>
    {
                        new   ContextMenuItemModel { Content="Both Width and Height" },
                        new   ContextMenuItemModel { Content="Width" },
                        new   ContextMenuItemModel { Content="Height" },
                    }
                },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Content="Lock" },
                new   ContextMenuItemModel { Content="Unlock" },
                new   ContextMenuItemModel { Separator= true },
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsGroup",Content="Group" },
                new   ContextMenuItemModel { Id ="ArrangeMenuItemsUngroup",Content="Ungroup" }
            };
    private List<  ContextMenuItemModel> WindowMenuItems = new List<  ContextMenuItemModel>
        {
                new   ContextMenuItemModel { Content="Show Toolbar",IconCss="sf-icon-Selection" },
                new   ContextMenuItemModel { Content="Show Stencil",IconCss="sf-icon-Selection" },
                new   ContextMenuItemModel { Content="Show Properties",IconCss="sf-icon-Selection" },
                new   ContextMenuItemModel { Content="Show Layers" },
                new   ContextMenuItemModel { Content="Show Pager" ,IconCss="sf-icon-Selection"},
               // new MenuItem { Text="Themes" }
            };
  private bool IsParent(string Text)
    {
        if (Text == "File" || Text == "Edit" || Text == "View" || Text == "Arrange" || Text == "Window" || Text == "Help")
            return true;
        else
            return false;
    }

    private string[] FieldChildren = new string[] { "Options" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (EditTooltip != null)
                EditTooltip.Parent = this;
            if (SaveDialogBox != null)
                SaveDialogBox.Parent = this;
            if (ExportDialogBox != null)
                ExportDialogBox.Parent = this;
            if (PrintDialogBox != null)
                PrintDialogBox.Parent = this;
        }

    }

    public bool enablePasteButten = false;

    public async Task MenuClick(Syncfusion.Blazor.Navigations.MenuEventArgs<ContextMenuItemModel> args)
    {
        bool Edit = false;
        bool File = false;
        bool Window = false;
        bool view = false;
        bool Arrange = false;

        Syncfusion.Blazor.Diagrams.SfDiagram diagram = Parent.DiagramContent.Diagram;
        string commandType = args.Item.Content.Replace(" ", "");
        switch (commandType.ToLower())
        {
            case "new":
                File = true;
                await jsRuntime.InvokeVoidAsync("CommonKeyboardCommands_newDiagram");
                break;
            case "open":
                File = true;
                await OpenUploadBox(true, ".json");
                break;
            case "undo":
                Edit = true;
                await diagram.Undo();
                break;
            case "redo":
                Edit = true;
                await diagram.Redo();
                break;
            case "cut":
                Edit = true;
                await diagram.Cut();
                enablePasteButten = true;
                break;
            case "copy":
                Edit = true;
                enablePasteButten = true;
                await diagram.Copy();
                break;
            case "paste":
                Edit = true;
                await diagram.Paste();
                break;
            case "delete":
                Edit = true;
                await diagram.Remove();
                break;
            case "duplicate":
                Edit = true;
                await diagram.Copy();
                await diagram.Paste();
                break;
            case "edittooltip":
                Edit = true;
                EditTooltip.EditTooltipVisible = true;
                await EditTooltip.EditTooltipDialog.Show();
                break;
            case "selectall":
                Edit = true;
                await diagram.SelectAll();
                break;
            case "save":
                File = true;
                string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await Download(fileName);
                break;
            case "saveas":
                File = true;
                SaveDialogBox.DiagramfileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await SaveDialogBox.SaveDialog.Show();
                break;
            case "print":
                File = true;
                await PrintDialogBox.PrintDialog.Show();
                break;
            case "export":
                File = true;
                await ExportDialogBox.ExportDialog.Show();
                break;
            case "sendtoback":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count > 0 || diagram.SelectedItems.Connectors.Count > 0)
                {
                    await diagram.SendToBack();
                }
                break;
            case "sendbackward":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count > 0 || diagram.SelectedItems.Connectors.Count > 0)
                {
                    await diagram.SendBackward();
                }
                break;
            case "bringtofront":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count > 0 || diagram.SelectedItems.Connectors.Count > 0)
                {
                    await diagram.BringToFront();
                }
                break;
            case "bringforward":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count > 0 || diagram.SelectedItems.Connectors.Count > 0)
                {
                    await diagram.MoveForward();
                }
                break;
            case "lock":
            case "unlock":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count > 0 || diagram.SelectedItems.Connectors.Count > 0)
                {
                    for (int i = 0; i < diagram.SelectedItems.Nodes.Count; i++)
                    {
                        await this.lockNode(diagram.SelectedItems.Nodes[i], diagram);
                    }
                    for (int i = 0; i < diagram.SelectedItems.Connectors.Count; i++)
                    {
                        await this.lockConnector(diagram.SelectedItems.Connectors[i], diagram);
                    }
                }
                break;
            case "group":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count + diagram.SelectedItems.Connectors.Count > 1)
                {
                    await diagram.Group();
                }
                break;
            case "ungroup":
                Arrange = true;
                if (diagram.SelectedItems.Nodes.Count + diagram.SelectedItems.Connectors.Count > 0)
                {
                    await diagram.UnGroup();
                }
                break;
            case "showtoolbar":
                Window = true;
                await Parent.Toolbar.HideElements("hide-toolbar");
                WindowMenuItems[0].IconCss = WindowMenuItems[0].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showstencil":
                Window = true;
                await Parent.Toolbar.HideElements("hide-palette");
                WindowMenuItems[1].IconCss = WindowMenuItems[1].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showproperties":
                Window = true;
                await Parent.Toolbar.HideElements("hide-properties");
                WindowMenuItems[2].IconCss = WindowMenuItems[2].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showlayers":
                Window = true;
                await Parent.Toolbar.ShowLayers();
                break;
            case "left":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Left);
                break;
            case "right":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Right);
                break;
            case "center":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Center);
                break;
            case "top":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Top);
                break;
            case "bottom":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Bottom);
                break;
            case "middle":
                Arrange = true;
                await diagram.Align(AlignmentOptions.Middle);
                break;
            case "horizontally":
                Arrange = true;
                await diagram.Distribute(DistributeOptions.RightToLeft);
                break;
            case "vertically":
                Arrange = true;
                await diagram.Distribute(DistributeOptions.BottomToTop);
                break;
            case "width":
                Arrange = true;
                await diagram.SameSize(SizingOptions.Width);
                break;
            case "height":
                Arrange = true;
                await diagram.SameSize(SizingOptions.Height);
                break;
            case "bothwidthandheight":
                Arrange = true;
                await diagram.SameSize(SizingOptions.Size);
                break;
            case "showguides":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.SnapToObject;
                ViewMenuItems[6].IconCss = ViewMenuItems[6].IconCss == null ? "sf-icon-Selection" : null;

                break;
            case "showpager":
                Window = true;
                await Parent.Toolbar.HideElements("hide-pager");
                WindowMenuItems[4].IconCss = WindowMenuItems[4].IconCss == null ? "sf-icon-Selection" : null;
                break;
            case "showgrid":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.ShowLines;
                ViewMenuItems[7].IconCss = ViewMenuItems[7].IconCss == null ? "sf-icon-Selection" : null;

                break;
            case "snaptogrid":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.SnapToLines;
                ViewMenuItems[9].IconCss = ViewMenuItems[9].IconCss == null ? "sf-icon-Selection" : null;

                break;
            case "fittoscreen":
                view = true;
                IFitOptions fitoption = new IFitOptions()
                {
                    Mode = FitModes.Page,
                    Region = DiagramRegions.Content,
                    Margin = new DiagramMargin() { Left = 0, Top = 0, Right = 0, Bottom = 0 }
                };
                //Parent.DiagramContent.DigramFitOption = fitoption;
                await Parent.DiagramContent.Diagram.FitToPage(fitoption);
                break;
            case "showrulers":
                view = true;
                Parent.DiagramContent.EnableRulers();
                ViewMenuItems[5].IconCss = (ViewMenuItems[5].IconCss == ""  || ViewMenuItems[5].IconCss == null )? "sf-icon-Selection" : null;
                break;
            case "zoomin":
                view = true;
                await Parent.DiagramContent.DiagramZoomIn();
                Parent.Toolbar.ZoomItemDropdownContent = (Math.Round(Parent.DiagramContent.CurrentZoom * 100)).ToString() + "%";
                Parent.Toolbar.StateChange();
                break;
            case "zoomout":
                view = true;
                await Parent.DiagramContent.DiagramZoomOut();
                Parent.Toolbar.ZoomItemDropdownContent = (Math.Round(Parent.DiagramContent.CurrentZoom * 100)).ToString() + "%";
                Parent.Toolbar.StateChange();
                break;
        }

        StateHasChanged();
        if(Edit)
            EditButton.Toggle();
        if (File)
            FileButton.Toggle();
        if (Window)
            WindowButton.Toggle();
        if (view)
            ViewButton.Toggle();
        if (Arrange)
            ArrangeButton.Toggle();

        Parent.DiagramContent.StateChanged();
    }

    private async Task lockNode(DiagramNode node, SfDiagram diagram)
    {
        var constraints = NodeConstraints.PointerEvents | NodeConstraints.Select;
        if (node.Constraints.HasFlag(NodeConstraints.Drag))
        {
            constraints = NodeConstraints.PointerEvents | NodeConstraints.Select;
        }
        else
        {
            constraints = NodeConstraints.Default;
        }
        if (node.Constraints.HasFlag(NodeConstraints.AspectRatio))
        {
            constraints = constraints | NodeConstraints.AspectRatio;
        }
        if (node.Constraints.HasFlag(NodeConstraints.Shadow))
        {
            constraints = constraints | NodeConstraints.Shadow;
        }
        DiagramNode GetNode = diagram.GetNode(node.Id);
        GetNode.Constraints = constraints;
    }

    private async Task lockConnector(DiagramConnector node, SfDiagram diagram)
    {
        var constraints = ConnectorConstraints.PointerEvents | ConnectorConstraints.Select;
        if (node.Constraints.HasFlag(ConnectorConstraints.Drag))
        {
            constraints = ConnectorConstraints.PointerEvents | ConnectorConstraints.Select;
        }
        else
        {
            constraints = ConnectorConstraints.Default;
        }

        DiagramConnector GetNode = diagram.GetConnector(node.Id);
        GetNode.Constraints = constraints;
    }
    public async Task OpenUploadBox(bool isOpen, string extensionType)
    {
        ExtensionType = extensionType;
        await FileUtil.Click(jsRuntime);
        Parent.DiagramContent.StateChanged();
    }
    public void ItemSelection()
    {
        List<string> DisableCollection = new List<string>();
        DiagramSelectedItems SelectedItems = Parent.DiagramContent.Diagram.SelectedItems;
        double DiagramCount = Parent.DiagramContent.Diagram.Nodes.Count + Parent.DiagramContent.Diagram.Connectors.Count;
        ObservableCollection<object> collection = new ObservableCollection<object>();
        var nodes = Parent.DiagramContent.Diagram.SelectedItems.Nodes;
        var connectors = Parent.DiagramContent.Diagram.SelectedItems.Connectors;

        foreach (DiagramNode node in nodes)
        {
            collection.Add(node);
        }
        foreach (DiagramConnector connector in connectors)
        {
            collection.Add(connector);
        }

        DiagramNode node1 = collection.Count > 0 ? collection[0] as DiagramNode : null;
        DiagramConnector connector1 = collection.Count > 0 ? collection[0] as DiagramConnector : null;

        bool isLock = ((node1 != null && node1.Constraints.HasFlag(NodeConstraints.Drag)) || (connector1 != null && connector1.Constraints.HasFlag(ConnectorConstraints.Drag))) ? false : true;

        Dictionary<string, bool> Select = new Dictionary<string, bool>()
{
            {"Undo",!Parent.DiagramContent.IsUndo},
            {"Redo",!Parent.DiagramContent.IsRedo},
            {"Cut",collection.Count == 0?true:false},
            {"Copy",collection.Count == 0?true:false},
            {"Paste",!enablePasteButten},
            {"Delete",collection.Count == 0?true:false},
            {"Duplicate",collection.Count == 0?true:false},
            {"Edit Tooltip",!(collection.Count == 1)?true:false},
            {"Select All",DiagramCount == 0?true:false},
        };
        Dictionary<string, bool> ArrangeSelect = new Dictionary<string, bool>()
{
            {"Send To Back",(collection.Count > 1 || collection.Count == 0)?true:false},
            {"Bring To Front",(collection.Count > 1 || collection.Count == 0)?true:false},
            {"Send Backward",(collection.Count > 1 || collection.Count == 0)?true:false},
            {"Bring Forward",(collection.Count > 1 || collection.Count == 0)?true:false},
            {"Align Objects",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Distribute Objects",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Match Size",(collection.Count == 1 || collection.Count == 0)?true:false},
            {"Lock",isLock},
            {"Unlock",(collection.Count == 0 ||!isLock)?true:false},
            {"Group",(collection.Count > 1)?false:true||(collection.Count == 1)?true:false||(collection.Count < 1)?false:true},
            {"Ungroup",(collection.Count==1 && node1 != null && node1.Children  != null && node1.Children.Length > 0)?false:true }
        };
        foreach (var Text in Select)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }

        foreach (var Text in ArrangeSelect)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }
        this.DisableCollection = DisableCollection;
    }


    public async Task Download(string fileName)
    {
        string data = await Parent.DiagramContent.Diagram.SaveDiagram();
        await FileUtil.SaveAs(jsRuntime, data, fileName);
    }

    public void OnUploadSuccess(SuccessEventArgs args)
    {
        if (args.Operation != "remove")
        {
            var file1 = args.File;
            var file = file1.RawFile;
            var fileType = file1.Type.ToString();
        }
    }

    public async Task OnUploadFileSelected(Syncfusion.Blazor.Inputs.UploadingEventArgs args)
    {
        if (args.FileData.Type == "json")
        {
            string json = await FileUtil.LoadFile(jsRuntime, args.FileData);
            json = json.Replace(System.Environment.NewLine, string.Empty);
            Parent.DiagramContent.Diagram.LoadDiagram(json.ToString());
        }
        else
        {
            SfDiagram Diagram = Parent.DiagramContent.Diagram;
            DiagramNode Node = Diagram.GetNode(Diagram.SelectedItems.Nodes[0].Id);
            await Diagram.StartGroupAction();
            Node.Shape.Type = Shapes.Image;
            Diagram.Nodes[0].Shape.Source = args.FileData.RawFile.ToString();
            await Diagram.EndGroupAction();
        }
    }

    public async Task ExportDiagram(Syncfusion.Blazor.Diagrams.IExportOptions exportOptions)
    {
        var diagram = Parent.DiagramContent.Diagram;

        await diagram.ExportDiagram(exportOptions);
    }

    public async Task PrintDiagram(Syncfusion.Blazor.Diagrams.IPrintOptions printOptions)
    {
        var diagram = Parent.DiagramContent.Diagram;

        await diagram.Print(printOptions);
    }
    public bool EnableMenuItems(string itemText, ObservableCollection<object> collection)
    {

        if (itemText != "")
        {
            var commandType = itemText.Replace(" ", "");
            if (collection.Count == 0)
            {
                switch (commandType.ToLower())
                {
                    case "edittooltip":
                        var disable = false;
                        if (!(collection.Count == 1))
                        {
                            disable = true;
                        }
                        return disable;
                    case "cut":
                        return true;
                    case "copy":
                        return true;
                    case "delete":
                        return true;
                    case "duplicate":
                        return true;
                }
            }
            if (collection.Count > 1)
            {
                switch (commandType.ToLower())
                {
                    case "edittooltip":
                        return true;
                }
            }
            if (!enablePasteButten && itemText == "Paste")
            {
                return true;
            }
            if (itemText == "Undo")
            {

                return !this.Parent.DiagramContent.IsUndo;
            }
            if (itemText == "Redo")
            {

                return !this.Parent.DiagramContent.IsRedo;
            }
            if (itemText == "Select All")
            {
                if (collection.Count == 0)
                {
                    return true;
                }
            }

            if (collection.Count > 1 || collection.Count == 0)
            {
                commandType = itemText.Replace(" ", "");
                switch (commandType.ToLower())
                {
                    case "sendtoback":
                        return true;
                    case "bringtofront":
                        return true;
                    case "sendbackward":
                        return true;
                    case "bringforward":
                        return true;
                }
            }

            if (collection.Count == 1 || collection.Count == 0)
            {
                commandType = itemText.Replace(" ", "");
                switch (commandType.ToLower())
                {
                    case "right":
                        return true;
                    case "left":
                        return true;
                    case "center":
                        return true;
                    case "top":
                        return true;
                    case "bottom":
                        return true;
                    case "middle":
                        return true;
                    case "horizontally":
                        return true;
                    case "vertically":
                        return true;
                    case "bothwidthandheight":
                        return true;
                    case "width":
                        return true;
                    case "height":
                        return true;
                    case "lock":
                        return true;
                    case "unlock":
                        return true;
                }
            }
        }
        return false;

    }


}