@using Syncfusion.Blazor.Diagrams
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel

@inherits SampleBaseComponent;

@namespace DiagramBuilder

    <div class="db-diagram-container">
        <div id="diagramContainerDiv" class=@DiagramContainerClassName>
            <SfDiagram @ref="@Diagram" ID="diagram" Width="100%" Height="100%"
                        DrawingObject="@DiagramDrawingObject" Tool="@DiagramTool" 
                        @onmouseover="@OnMouseover" @onmouseout="@OnMouseout">
                <DiagramPageSettings ShowPageBreaks="@DiagramShowPageBreaks" Orientation="@DiagramOrientation" Width="@DiagramPageWidth" Height="@DiagramPageHeight" MultiplePage="true">
                    <DiagramBackground Color="@DiagramBgColor"></DiagramBackground>
                    <DiagramFitOptions @ref="@DigramFitOption"></DiagramFitOptions>
                    <PageSettingsMargin Left="5" Top="5"></PageSettingsMargin>
                </DiagramPageSettings>
                <DiagramRulerSettings ShowRulers="@ShowRuler" DynamicGrid="@DynamicGrid"></DiagramRulerSettings>
                <DiagramSnapSettings Constraints="@SnapConstraint">
                    <HorizontalGridlines LineIntervals="@SnapIntervals" LineColor="#EEEEEE"></HorizontalGridlines>
                    <VerticalGridlines LineIntervals="@SnapIntervals" LineColor="#EEEEEE"></VerticalGridlines>
                </DiagramSnapSettings>
                <DiagramScrollSettings CanAutoScroll="true" ScrollLimit="ScrollLimit.Infinity" MinZoom="0.25" MaxZoom="30" CurrentZoom="@CurrentZoom"></DiagramScrollSettings>
                <DiagramContextMenuSettings Items="@contextMenuItemModels" Show="true" ShowCustomMenuOnly="false"></DiagramContextMenuSettings>
                <DiagramCommandManager>
                    <DiagramCommands>
                        <DiagramCommand Name="Duplicate">
                            <DiagramKeyGesture Key="Keys.D" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="SendToBack">
                            <DiagramKeyGesture Key="Keys.B" KeyModifiers="KeyModifiers.Shift | KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="BringToFront">
                            <DiagramKeyGesture Key="Keys.F" KeyModifiers="KeyModifiers.Shift | KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="Group">
                            <DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="Ungroup">
                            <DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="New">
                            <DiagramKeyGesture Key="Keys.N" KeyModifiers="KeyModifiers.Shift"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="Open">
                            <DiagramKeyGesture Key="Keys.O" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                        <DiagramCommand Name="Save">
                            <DiagramKeyGesture Key="Keys.S" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                        </DiagramCommand>
                    </DiagramCommands>
                </DiagramCommandManager>
                <DiagramEvents OnContextMenuOpen="@OnContextMenuOpen" ContextMenuItemClicked="@ContextMenuItemClicked" OnDoubleClick ="@OnDoubleClick"
                                SelectionChanged="@SelectionChanged" OnPositionChange="@PositionChanged" OnSizeChange="@SizeChanged" OnRotateChange="@RotateChanged"
                                HistoryChanged="@HistoryChange" OnCommandExecuted="@KeyboardCommands"></DiagramEvents>
            </SfDiagram>
        </div>
        <div class="db-more-diagram-options-container">
            <div id="pageOptionList">
                @for (int i = 0; i < PageList.Count; i++)
                {
                    PageOptionElement page = PageList[i];
                    string activeClass = "";
                    @if (ActivePage == PageList[i])
                        activeClass = "db-active-page";
                    <SfButton Content="@PageList[i].Name" CssClass="@activeClass" OnClick="@(e => ShowPageData(page))"></SfButton>
                }
                <SfButton ID="addNewPage" IconCss="sf-icon-Plus" OnClick="AddNewPage"></SfButton>
            </div>
        </div>
    </div>

@code {
    internal DiagramMain Parent;

    List<ContextMenuItemModel> contextMenuItemModels { get; set; }
    public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }

    public string DiagramContainerClassName = "db-current-diagram-container";
    public SfDiagram Diagram;
    public object DiagramDrawingObject;
    public DiagramTools DiagramTool = DiagramTools.Default;
    public bool DiagramShowPageBreaks;
    public PageOrientation DiagramOrientation = PageOrientation.Landscape;
    public double DiagramPageWidth = 816;
    public double DiagramPageHeight = 1056;
    public bool IsUndo = false;
    public bool IsRedo = false;
    public string DiagramBgColor = "white";
    public DiagramFitOptions DigramFitOption;
    public double CurrentZoom = 1;
    public SnapConstraints SnapConstraint = SnapConstraints.All & ~SnapConstraints.SnapToLines;
    public double[] SnapIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };

    public bool ShowRuler = false;
    public bool DynamicGrid = false;

    public class NodeAddInfo {
        public double Level;
        public string Orientation;
    }

    List<PageOptionElement> PageList = new List<PageOptionElement>();
    PageOptionElement ActivePage;
    private void OnDoubleClick(IBlazorDoubleClickEventArgs args)
    {
        DiagramTool = DiagramTools.Default;
    }
    private async Task SelectionChanged(IBlazorSelectionChangeEventArgs args)
    {
        if (args.State == EventState.Changed)
        {
            await Parent.Toolbar.EnableToolbarItems(args.NewValue, "selectionchange");
            int ObjectsLength = Diagram.SelectedItems.Nodes.Count + Diagram.SelectedItems.Connectors.Count;
            await jsRuntime.InvokeAsync<object>("removeClassInElement", "nodePropertyContainer", "multiple");
            await jsRuntime.InvokeAsync<object>("removeClassInElement", "nodePropertyContainer", "connector");
            if (ObjectsLength > 1 && (args.NewValue.Nodes.Count > 0 || args.NewValue.Connectors.Count > 0))
            {
                this.MultipleSelectionSettings(args.NewValue);
            }
            else if (ObjectsLength == 1 && (args.NewValue.Nodes.Count > 0 || args.NewValue.Connectors.Count > 0))
            {
                if (Diagram.SelectedItems.Nodes.Count == 1)
                {
                    if (DiagramContainerClassName.Contains("mindmap-diagram"))
                    {
                        Parent.MindMapPropertyPanel.bindMindMapProperties();
                    }
                    else
                    {
                        await jsRuntime.InvokeAsync<object>("objectTypeChange", "node");
                        Parent.DiagramPropertyPanel.SingleNodeSelection();
                    }
                }
                else
                {
                    if (Diagram.SelectedItems.Connectors.Count > 0)
                    {
                        await jsRuntime.InvokeAsync<object>("objectTypeChange", "connector");
                        Parent.DiagramPropertyPanel.SingleConnectorSelection();
                    }
                }
            }
            else
            {
                await jsRuntime.InvokeAsync<object>("objectTypeChange", "diagram");
                Parent.DiagramPropertyPanel.BindDiagramProperties();
            }
        }
    }

    private async Task HistoryChange(IBlazorHistoryChangeArgs args)
    {
        await Parent.Toolbar.EnableToolbarItems(new object() { }, "historychange");
    }

    private async Task PositionChanged(IBlazorDraggingEventArgs args)
    {
        await UpdatePropertyPanel();
    }

    private async Task SizeChanged(ISizeChangeEventArgs args)
    {
        await UpdatePropertyPanel();
    }

    private async Task RotateChanged(IRotationEventArgs args)
    {
        await UpdatePropertyPanel();
    }

    private async Task UpdatePropertyPanel()
    {
        await Task.Delay(200);
        int ObjectsLength = Diagram.SelectedItems.Nodes.Count + Diagram.SelectedItems.Connectors.Count;
        if (ObjectsLength == 1)
        {
            if (DiagramContainerClassName.Contains("mindmap-diagram"))
            {
                Parent.MindMapPropertyPanel.bindMindMapProperties();
            }
            else
            {
                if (Diagram.SelectedItems.Nodes.Count == 1)
                    Parent.DiagramPropertyPanel.SingleNodeSelection();
                else
                    Parent.DiagramPropertyPanel.SingleConnectorSelection();
            }
        }
    }

    public ObservableCollection<DiagramNode> NodesCollection = new ObservableCollection<DiagramNode>();
    public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();

    protected override void OnInitialized()
    {
        PageOptionElement pageOption = new PageOptionElement()
        {
            Diagram = "",
            Name = "Page1",
            PageSwitch = true
        };
        PageList.Add(pageOption);
        ActivePage = pageOption;

        // Add the custom context menu items
        contextMenuItemModels = new List<ContextMenuItemModel>()
        {
            new ContextMenuItemModel()
            {
                Text = "Duplicate",
                Id = "duplicate",
                Target = ".e-elementcontent",
            }
        };

        SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
        {
            Constraints = SelectorConstraints.All & ~SelectorConstraints.ToolTip
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (Parent != null)
            Parent.LeftSideBar.DiagramOverview.SetDiagramID(Diagram.ID);
    }

    private void MultipleSelectionSettings(DiagramEventObjectCollection SelectedItems)
    {
        jsRuntime.InvokeAsync<object>("objectTypeChange", "none");
        bool showConnectorPanel = false; bool showNodePanel = false;
        bool showTextPanel = false; bool showConTextPanel = false;

        for (int i = 0; i < SelectedItems.Nodes.Count; i++)
        {
            DiagramNode Node = SelectedItems.Nodes[i];
            if (Node != null && (!showNodePanel || !showTextPanel))
            {
                showNodePanel = true;
                showTextPanel = Node.Annotations.Count > 0 && Node.Annotations[0].Content != "" ? true : false;
            }
        }
        for (int i = 0; i < SelectedItems.Connectors.Count; i++)
        {
            DiagramConnector Connector = SelectedItems.Connectors[i];
            if (Connector != null && (!showConnectorPanel || !showConTextPanel))
            {
                showConnectorPanel = true;
                showConTextPanel = Connector.Annotations.Count > 0 && Connector.Annotations[0].Content != "" ? true : false;
            }
        }
        if (showNodePanel)
        {
            jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "nodePropertyContainer", true);
            jsRuntime.InvokeAsync<object>("addClassInElement", "nodePropertyContainer", "multiple");
            if (showConnectorPanel)
            {
                jsRuntime.InvokeAsync<object>("addClassInElement", "nodePropertyContainer", "connector");
            }
            if (SelectedItems.Nodes.Count == 1)
                Parent.DiagramPropertyPanel.SingleNodeSelection();
        }
        if (showConnectorPanel && !showNodePanel)
        {
            jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "connectorPropertyContainer", true);
            Parent.DiagramPropertyPanel.SingleConnectorSelection();
        }
        if (showTextPanel || showConTextPanel)
        {
            jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "textPropertyContainer", true);
            if (showTextPanel && showConTextPanel)
            {
                jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "textPositionDiv", false);
                jsRuntime.InvokeAsync<object>("addClassInElement", "textColorDiv", "col-xs-6 db-col-left");
            }
            else
            {
                jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "textPositionDiv", true);
                jsRuntime.InvokeAsync<object>("addClassInElement", "textColorDiv", "col-xs-6 db-col-right");
            }
        }
    }

    public async Task DiagramZoomIn()
    {
        await Diagram.ZoomTo(new ZoomOptions() { Type = ZoomTypes.ZoomIn, ZoomFactor = 0.2d });
        CurrentZoom = (CurrentZoom + 0.2);
    }
    public async Task DiagramZoomOut()
    {
        await Diagram.ZoomTo(new ZoomOptions() { Type = ZoomTypes.ZoomOut, ZoomFactor = 0.2d });
        CurrentZoom = (CurrentZoom - 0.2);
    }
    public void EnableRulers()
    {
        ShowRuler = !ShowRuler;
        if (ShowRuler)
        {
            DynamicGrid = false;
        }
    }

    public void StateChanged()
    {
        StateHasChanged();
    }

    public void LoadNewDiagram(string Json)
    {
        Diagram.LoadDiagram(Json);
        Parent.LeftSideBar.DiagramOverview.SetDiagramID(Diagram.ID);
    }

    private async Task AddNewPage()
    {
        ActivePage.Diagram = await Diagram.SaveDiagram();
        ActivePage.PageSwitch = false;

        PageOptionElement pageOption = new PageOptionElement()
        {
            Diagram = "",
            Name = "Page" + (PageList.Count + 1).ToString(),
            PageSwitch = true
        };
        await Diagram.Clear();
        PageList.Add(pageOption);
        ActivePage = pageOption;
    }

    public class PageOptionElement
    {
        public string Diagram { get; set; }
        public bool PageSwitch { get; set; }
        public string Name { get; set; }
    }

    private async Task ShowPageData(PageOptionElement page)
    {
        ActivePage.Diagram = await Diagram.SaveDiagram();
        ActivePage.PageSwitch = false;

        Diagram.LoadDiagram(page.Diagram.ToString());
        page.PageSwitch = true;

        ActivePage = page;
    }

    private PageOptionElement findPage(string id)
    {
        for (var i = 0; i < this.PageList.Count; i++)
        {
            if (this.PageList[i].Name == id)
            {
                return this.PageList[i];
            }
        }
        return null;
    }

    public void AddNodes(ObservableCollection<DiagramNode> Nodes)
    {
        Diagram.BeginUpdate();
        for (int i = 0; i < Nodes.Count; i++)
        {
            NodesCollection.Add(Nodes[i]);
        }
        Diagram.EndUpdate();
    }

    public void AddConnectors(ObservableCollection<DiagramConnector> Connectors)
    {
        Diagram.BeginUpdate();
        for (int i = 0; i < Connectors.Count; i++)
        {
            ConnectorCollection.Add(Connectors[i]);
        }
        Diagram.EndUpdate();
    }

    public void OnMouseover() {
        Parent.DiagramPropertyPanel.PreventPropertyChange = true;
    }
    public void OnMouseout() {
        Parent.DiagramPropertyPanel.PreventPropertyChange = false;
    }
    public async Task ContextMenuItemClicked(DiagramMenuEventArgs args)
    {
        if (args.Item.Text == "Duplicate")
        {
            await Diagram.Copy();
            await Diagram.Paste();
        }
    }
    public void OnContextMenuOpen(DiagramBeforeMenuOpenEventArgs arg)
    {
        if (Diagram.SelectedItems.Nodes.Count == 0 && Diagram.SelectedItems.Connectors.Count == 0)
        {
            arg.HiddenItems.Add("duplicate");
        }
    }
    public async Task KeyboardCommands(ICommandExecuteEventArgs args)
    {
        if (Diagram.SelectedItems.Nodes.Count > 0 || Diagram.SelectedItems.Connectors.Count > 0)
        {
            if (args.Gesture.Key == Keys.D && args.Gesture.KeyModifiers == KeyModifiers.Control)
            {
                await Diagram.Copy(); await Diagram.Paste();
            }
            else if (args.Gesture.Key == Keys.B && (args.Gesture.KeyModifiers == (KeyModifiers.Control | KeyModifiers.Shift)))
            {
                await Diagram.SendToBack();
            }
            else if (args.Gesture.Key == Keys.F && (args.Gesture.KeyModifiers == (KeyModifiers.Control | KeyModifiers.Shift)))
            {
                await Diagram.BringToFront();
            }
            else if (args.Gesture.Key == Keys.G && args.Gesture.KeyModifiers == KeyModifiers.Control)
            {
                await Diagram.Group();
            }
            else if (args.Gesture.Key == Keys.U && args.Gesture.KeyModifiers == KeyModifiers.Control)
            {
                await Diagram.UnGroup();
            }
        }
        else
        {
            if (args.Gesture.Key == Keys.N && args.Gesture.KeyModifiers == KeyModifiers.Shift)
            {
                await jsRuntime.InvokeVoidAsync("CommonKeyboardCommands_newDiagram");
            }
            else if (args.Gesture.Key == Keys.O && args.Gesture.KeyModifiers == KeyModifiers.Control)
            {
                await Parent.MenuBar.OpenUploadBox(true, ".json");
            }
            else if (args.Gesture.Key == Keys.S && args.Gesture.KeyModifiers == KeyModifiers.Control)
            {
                string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await Parent.MenuBar.Download(fileName);
            }
        }
    }
}