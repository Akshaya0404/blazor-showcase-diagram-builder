@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Diagrams
@using System.Collections.ObjectModel

@namespace DiagramBuilder

<div class="db-palette-parent">
    <div id="symbolpalette"></div>
    <SfSymbolPalette @ref="@SymbolPalette" ID="symbolpalette" Width="100%" Height="100%" SymbolWidth="50" SymbolHeight="50" ExpandMode="ExpandMode.Multiple" EnableSearch="true" SymbolInfo="@GetSymbolInfo"
                     Palettes="@Palettes" NodeDefaults="@PaletteNodeDefaults" ConnectorDefaults="@PaletteConnectorDefaults">
        <SymbolPaletteSymbolPreview Width="100" Height="100"></SymbolPaletteSymbolPreview>
        <SymbolMargin Left="12" Right="12" Top="12" Bottom="12"></SymbolMargin>
    </SfSymbolPalette>
</div>

@code {

    internal DiagramLeftSideBar Parent;

    SfSymbolPalette SymbolPalette;

    SymbolInfo GetSymbolInfo = new SymbolInfo() { Fit = true };

    public DiagramNode PaletteNodeDefaults { get; set; }

    public DiagramConnector PaletteConnectorDefaults { get; set; }

    // Defines palette's flow-shape collection
    public ObservableCollection<object> FlowShapeList { get; set; }

    // Defines palette's basic-shape collection
    public ObservableCollection<object> BasicShapeList { get; set; }

    // Defines palette's Bpmn-shape collection
    public ObservableCollection<object> BpmnShapeList { get; set; }

    // Defines palette's connector collection
    public ObservableCollection<object> ConnectorList { get; set; }
    // Defines palette's Electrical Audio  collection
    public ObservableCollection<object> ElectericalAudioList { get; set; }
    // Defines palette's Electrical capacitorso  collection
    public ObservableCollection<object> ElectricalCapacitorsList { get; set; }
    // Defines palette's Electrical Diodes  collection
    public ObservableCollection<object> ElectricalDiodesList { get; set; }
    // Defines palette's Electrical Gates  collection
    public ObservableCollection<object> ElectricalGatesList { get; set; }
    // Defines palette's Electrical Inductors  collection
    public ObservableCollection<object> ElectricalInductorsList { get; set; }
    // Defines palette's Electrical Instruments  collection
    public ObservableCollection<object> ElectricalInstrumentsList { get; set; }
    // Defines palette's Electrical Mics  collection
    public ObservableCollection<object> ElectricalMicsList { get; set; }
    // Defines palette's Electrical Optical  collection
    public ObservableCollection<object> ElectricalOpticalList { get; set; }
    // Defines palette's Electrical PLC Ladder  collection
    public ObservableCollection<object> ElectricalPLCLadderList { get; set; }
    // Defines palette's Electrical Resistor  collection
    public ObservableCollection<object> ElectricalResistorList { get; set; }
    // Defines palette's Electrical  Rotating Equipment  collection
    public ObservableCollection<object> ElectricalRotatingEquipmentList { get; set; }
    // Defines palette's Electrical Sources  collection
    public ObservableCollection<object> ElectricalSourcesList { get; set; }
    // Defines palette's Electrical Switches  collection
    public ObservableCollection<object> ElectricalSwitchesList { get; set; }
    // Defines palette's Electrical Transmission  collection
    public ObservableCollection<object> ElectricalTransmissionList { get; set; }
    // Defines palette's Electrical Transistors  collection
    public ObservableCollection<object> ElectricalTransistorsList { get; set; }
    // Defines palette's Electrical Vaccum Tubes  collection
    public ObservableCollection<object> ElectricalVaccumTubesList { get; set; }
    // Defines palette's Electrical  Wave Forms collection
    public ObservableCollection<object> ElectricalWaveFormsList { get; set; }
    // Defines palette's Network shapes  collection
    public ObservableCollection<object> NetworkShapesList { get; set; }
    // Defines palette's Floor Plane Shapes collection
    public ObservableCollection<object> FloorPlaneShapesList { get; set; }

    public SymbolPalettePalette FlowShapePalette { get; set; }
    public SymbolPalettePalette BasicShapePalette { get; set; }
    public SymbolPalettePalette BpmnShapePalette { get; set; }
    public SymbolPalettePalette ConnectorPalette { get; set; }
    public SymbolPalettePalette ElectericalAudio { get; set; }
    public SymbolPalettePalette ElectricalCapacitors { get; set; }
    public SymbolPalettePalette ElectricalDiodes { get; set; }
    public SymbolPalettePalette ElectricalGates { get; set; }
    public SymbolPalettePalette ElectricalInductors { get; set; }
    public SymbolPalettePalette ElectricalInstruments { get; set; }
    public SymbolPalettePalette ElectricalMics { get; set; }
    public SymbolPalettePalette ElectricalOptical { get; set; }
    public SymbolPalettePalette ElectricalPLCLadder { get; set; }
    public SymbolPalettePalette ElectricalResistor { get; set; }
    public SymbolPalettePalette ElectricalRotatingEquipment { get; set; }
    public SymbolPalettePalette ElectricalSources { get; set; }
    public SymbolPalettePalette ElectricalTransmission { get; set; }
    public SymbolPalettePalette ElectricalSwitches { get; set; }
    public SymbolPalettePalette ElectricalTransistors { get; set; }
    public SymbolPalettePalette ElectricalVaccumTubes { get; set; }
    public SymbolPalettePalette ElectricalWaveFormsEquipment { get; set; }
    public SymbolPalettePalette NetworkShapes { get; set; }
    public SymbolPalettePalette FloorPlaneShapes { get; set; }

    public ObservableCollection<SymbolPalettePalette> Palettes { get; set; }


    protected override void OnInitialized()
    {
        PaletteNodeDefaults = new DiagramNode() { Width = 50, Height = 50, Style = new NodeShapeStyle() { StrokeWidth = 2 }, Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "" } } };
        PaletteConnectorDefaults = new DiagramConnector() { Style = new ConnectorShapeStyle() { StrokeWidth = 2 }, Annotations = new ObservableCollection<DiagramConnectorAnnotation>() { new DiagramConnectorAnnotation(){ Content = "" } } };
        InitializePalettes();
        FlowShapePalette = new SymbolPalettePalette() { Id = "FlowShapePalette", Expanded = true, Symbols = FlowShapeList, IconCss = "e-ddb-icons e-flow", Title = "Flow Shapes" };
        BasicShapePalette = new SymbolPalettePalette() { Id = "BasicShapePalette", Expanded = true, Symbols = BasicShapeList, IconCss = "e-ddb-icons e-flow", Title = "Basic Shapes" };
        BpmnShapePalette = new SymbolPalettePalette() { Id = "BpmnShapePalette", Expanded = true, Symbols = BpmnShapeList, IconCss = "e-ddb-icons e-flow", Title = "BPMN Shapes" };
        ConnectorPalette = new SymbolPalettePalette() { Id = "ConnectorPalette", Expanded = true, Symbols = ConnectorList, IconCss = "e-ddb-icons e-connector", Title = "Connectors" };


        Palettes = new ObservableCollection<SymbolPalettePalette>();
        Palettes.Add(FlowShapePalette);
        Palettes.Add(BasicShapePalette);
        Palettes.Add(BpmnShapePalette);
        Palettes.Add(ConnectorPalette);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            InitializeElectricalShapes();
            InitializeNetworkShapes();
            InitializeFloorShapes();
            await Task.Delay(1).ConfigureAwait(true);
        }
    }

}
