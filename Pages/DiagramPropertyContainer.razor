@using Syncfusion.Blazor.Buttons
@using System.Collections.Generic
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Diagrams
@using Syncfusion.Blazor.Popups
@using System.Collections.ObjectModel
@using Newtonsoft.Json.Linq
@using System.Drawing
@inject IJSRuntime js

@namespace DiagramBuilder

<div id="generalDiagramContainer" class="db-general-diagram-prop-container">
        <div id='diagramPropertyContainer' class="db-diagram-prop-container">
            <div class="row db-prop-header-text">
                Page Settings
            </div>
            <div class="row db-prop-row">
                <SfDropDownList TValue="string" TItem="PaperListFields" PopupHeight="230px" DataSource="@PaperList" @bind-Value="@PaperListValue">
                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="string" TItem="PaperListFields" ValueChange="@OnPaperListValueChange"></DropDownListEvents>
                </SfDropDownList>
            </div>
            <div class="row db-prop-row" id="pageOrientation">
                <div class="col-xs-3 db-prop-col-style" style="margin-right: 8px;width: 30%;">
                    <SfRadioButton ID="pagePortrait" Name="pageSettings" TChecked="bool" TValue="bool" Label="Portrait" @bind-Checked="@PagePortraitValue" @onchange="@OnPagePortraitChange">
                        
                    </SfRadioButton>
                </div>
                <div class="col-xs-3 db-prop-col-style">
                    <SfRadioButton ID="pageLandscape" Name="pageSettings" TChecked="bool" TValue="bool" Value="true" Label="Landscape" @bind-Checked="@PageLandscapeValue" @onchange="@OnPageLandscapeChange"></SfRadioButton>
                </div>
            </div>
            <div class="row db-prop-row" id='pageDimension' style="display:none">
                <div class="col-xs-6 db-col-left">
                    <div class="db-text-container">
                        <div class="db-text">
                            <span>W</span>
                        </div>
                        <div class="db-text-input">
                            <SfNumericTextBox Value="@PageWidth" ID="pageWidth"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                <NumericTextBoxEvents TValue="double" ValueChange="@OnPageWidthChange"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </div>
                    </div>
                </div>
                <div class="col-xs-6 db-col-right">
                    <div class="db-text-container">
                        <div class="db-text">
                            <span>H</span>
                        </div>
                        <div class="db-text-input">
                            <SfNumericTextBox Value="@PageHeight" ID="pageHeight"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                <NumericTextBoxEvents TValue="double" ValueChange="@OnPageHeightChange"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-6 db-col-left">
                    <div class="db-color-container">
                        <div class="db-color-input" style="width:100%">
                            <SfColorPicker ID="pageBgColor" Mode="ColorPickerMode.Palette" Value="@PageBgColorValue" ValueChange="@OnPageBgColorChange"></SfColorPicker>
                        </div>
                        <div class="db-color-btn">
                            <SfButton ID="pageBgColorPickerBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row db-prop-row">
                <SfCheckBox ID="showPageBreaks" Label="Page Breaks" @bind-Checked="@ShowPageBreaksValue" @onchange="@OnShowPageBreaksChange"></SfCheckBox>
            </div>
        </div>
        <div id='nodePropertyContainer' class="db-node-prop-container" style="display:none">
            <div class="db-node-behaviour-prop">
                <div class="row db-prop-header-text">
                    Dimensions
                </div>
                <div class="row db-prop-row">
                    <div class="col-xs-6 db-col-left">
                        <div class="db-text-container">
                            <div class="db-text">
                                <span>X</span>
                            </div>
                            <div class="db-text-input">
                                <SfNumericTextBox Value="@NodeOffsetX" ID="nodeOffsetX"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                    <NumericTextBoxEvents TValue="double" ValueChange="@OnNodeOffsetXChange"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-6 db-col-right">
                        <div class="db-text-container">
                            <div class="db-text">
                                <span>Y</span>
                            </div>
                            <div class="db-text-input">
                                <SfNumericTextBox Value="@NodeOffsetY" ID="nodeOffsetY"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                    <NumericTextBoxEvents TValue="double" ValueChange="@OnNodeOffsetYChange"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row db-prop-row">
                    <div class="col-xs-6 db-col-left">
                        <div class="db-text-container">
                            <div class="db-text">
                                <span>W</span>
                            </div>
                            <div class="db-text-input">
                                <SfNumericTextBox Value="@NodeWidth" ID="nodeWidth" Min="1"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                    <NumericTextBoxEvents TValue="double" ValueChange="@OnNodeWidthChange"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-6 db-col-right">
                        <div class="db-text-container">
                            <div class="db-text">
                                <span>H</span>
                            </div>
                            <div class="db-text-input">
                                <SfNumericTextBox Value="@NodeHeight" ID="nodeHeight" Min="1"  ValidateDecimalOnType="true" Decimals=0 Format="n0">
                                    <NumericTextBoxEvents TValue="double" ValueChange="@OnNodeHeightChange"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row db-prop-row">
                    <div class="col-xs-6 db-col-left">
                        <SfCheckBox ID="aspectRatio" Label="Aspect Ratio" @bind-Checked="@NodeAspectRatio" @onchange="@OnChangeAspectRatio"></SfCheckBox>
                    </div>
                </div>
                <div class="row db-prop-row">
                    <div class="col-xs-6 db-col-left">
                        <span class="db-prop-text-style">Rotate</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-6 db-col-left">
                        <div class="db-text-container">
                            <div class="db-text">
                                <SfButton ID="rotateIconBtn" IconCss="sf-icon-Rotate1 tb-icons"></SfButton>
                            </div>
                            <div class="db-text-input">
                                <SfNumericTextBox ID="nodeRotateAngle" Format="n0"  ValidateDecimalOnType="true" Decimals=0 Value="@NodeRotateAngle">
                                    <NumericTextBoxEvents TValue="double" ValueChange="@OnNodeRotateAngleChange"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="db-prop-separator">
                </div>
                <div class="row db-prop-header-text">
                    Insert
                </div>
                <div class="row db-prop-row">
                    <div class="col-xs-6 db-col-left">
                        <SfToolbar ID="toolbarNodeInsert" OverflowMode="@OverflowMode.Scrollable">
                            <ToolbarEvents Clicked="@ToolbarInsertClick"></ToolbarEvents>
                            <ToolbarItems>
                                <ToolbarItem PrefixIcon="sf-icon-InsertLink tb-icons" TooltipText="Insert Link" CssClass="tb-item-start"></ToolbarItem>
                                <ToolbarItem PrefixIcon="sf-icon-InsertImage tb-icons" TooltipText="Insert Image" CssClass="tb-item-end"></ToolbarItem>
                            </ToolbarItems>
                        </SfToolbar>
                    </div>
                </div>
                <div class="db-prop-separator">
                </div>
            </div>
            <div id='nodeStyleProperties' class="db-node-style-prop">
                <div class="row db-background-style">
                    <div class="row db-prop-header-text">
                        Background and Border Styles
                    </div>
                    <div class="row db-prop-row">
                        <div class="col-xs-6 db-col-left">
                            <div class="db-color-container">
                                <div class="db-color-input">
                                    <SfColorPicker ID="nodeFillColor" Mode="ColorPickerMode.Palette" Value="@NodeFillColor" ValueChange="@OnFillColorChange"></SfColorPicker>
                                </div>
                                <div class="db-color-btn">
                                    <SfButton ID="fillColorIconBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id='gradientStyle' class="row db-prop-row db-gradient-style-hide">
                        <div class="col-xs-4 db-col-left">
                            <SfCheckBox ID="gradient" Label="Gradient" @onchange="@EnableGradient" @bind-Checked="@IsGradient"></SfCheckBox>
                        </div>
                        <div class="col-xs-4 db-col-center">
                            <SfDropDownList ID="gradientDirectionDropdown" TValue="string" Index="NodeGradientDircIndex" TItem="GradientDirectionsFields" PopupWidth="200px" DataSource="@GradientDirections" @bind-Value="@NodeGradientDirection">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="GradientDirectionsFields" ValueChange="@OnGradientDirectionChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        <div class="col-xs-4 db-col-right">
                            <div class="db-color-container">
                                <div class="db-color-input">
                                    <SfColorPicker ID="nodeGradientColor" Value="@NodeGradientColor" Mode="ColorPickerMode.Palette" ValueChange="@OnNodeGradientColorChange"></SfColorPicker>
                                </div>
                                <div class="db-color-btn">
                                    <SfButton ID="gradientColorIconBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row db-border-style">
                    <div class="row db-prop-header-text db-border-style-header">
                        Border/Line Styles
                    </div>
                    <div class="row db-prop-row">
                        <div class="col-xs-4 db-col-right">
                            <span class="db-prop-text-style">Stroke Color</span>
                        </div>
                        <div class="col-xs-4 db-col-center">
                            <span class="db-prop-text-style">Stroke Style</span>
                        </div>
                        <div class="col-xs-4 db-col-left">
                            <span class="db-prop-text-style">Stroke Width</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-4 db-col-left">
                            <div class="db-color-container">
                                <div class="db-color-input">
                                    <SfColorPicker ID="nodeStrokeColor" Mode="ColorPickerMode.Palette" Value="@NodeStrokeColor" ValueChange="@OnStrokeColorChange"></SfColorPicker>
                                </div>
                                <div class="db-color-btn">
                                    <SfButton ID="strokeColorIconBtn" IconCss="sf-icon-Pickers tb-icons"></SfButton>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-4 db-col-center">
                            <SfDropDownList TValue="string" TItem="BorderStylesFields" Index ="NodeStrokeValue" PopupWidth="160px" DataSource="@BorderStyles">
                                <DropDownListTemplates TItem="BorderStylesFields">
                                    <ItemTemplate>
                                        <div class='db-ddl-template-style'>
                                            <span class=@((context as BorderStylesFields).ClassName)></span>
                                        </div>
                                    </ItemTemplate>
                                    <ValueTemplate>
                                        <div class='db-ddl-template-style'>
                                            <span class=@((context as BorderStylesFields).ClassName)></span>
                                        </div>
                                    </ValueTemplate>
                                </DropDownListTemplates>
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="BorderStylesFields" ValueChange="@OnStrokeDashArrayChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        <div class="col-xs-4 db-col-right">
                            <SfNumericTextBox ID="nodeStrokeWidth" Min="0" Step="0.5"  ValidateDecimalOnType="true" Decimals=2 Value="@NodeStrokeWidth">
                                <NumericTextBoxEvents TValue="double" ValueChange="@OnStrokeWidthChange"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </div>
                    </div>
                    <div class="row db-prop-row">
                        <div class="col-xs-2 db-col-right db-prop-text-style" style="padding-top: 6px">
                            <span class="db-prop-text-style">Opacity</span>
                        </div>
                        <div class="col-xs-8 db-col-left" style="padding-right:10px">
                            <SfSlider ID="nodeOpacitySlider" Type="SliderType.MinRange" Value="@NodeOpacity" Min="0" Max="100" Step="10">
                                <SliderEvents TValue="double" OnChange="@(e => { OnNodeOpacityChange(e.Value); })"></SliderEvents>
                            </SfSlider>
                        </div>
                        <div class="col-xs-2 db-col-right">
                            <input id="nodeOpacitySliderText" type="text" value='100%' readOnly="readonly" class="db-readonly-input" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id='connectorPropertyContainer' class="db-connector-prop-container" style="display:none">
            <div class="row db-prop-header-text">
                Connector Properties
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-6 db-col-left db-prop-text-style">
                    <span class="db-prop-text-style">Connector Type</span>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6 db-col-left">
                    <SfDropDownList ID="lineTypeDropdown" TValue="string" TItem="LineTypeFields" PopupHeight="230px" DataSource="@LineType" @bind-Value="@ConnectorType">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="LineTypeFields" ValueChange="@OnConnectorTypeChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-6 db-col-left">
                    <div class="db-color-container">
                        <div class="db-color-input">
                            <SfColorPicker ID="lineColor" Mode="ColorPickerMode.Palette" Value="@ConnectorStrokeColor" ValueChange="@OnStrokeColorChange"></SfColorPicker>
                        </div>
                        <div class="db-color-btn">
                            <SfButton ID="lineColorIconBtn" IconCss="sf-icon-Pickers tb-icons"></SfButton>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-8 db-col-left db-prop-text-style">
                    <span class="db-prop-text-style">Stroke Style</span>
                </div>
                <div class="col-xs-4 db-col-right db-prop-text-style">
                    <span class="db-prop-text-style">Thickness</span>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-8 db-col-left">
                    <SfDropDownList TValue="string" TItem="BorderStylesFields" Index ="ConnectorStrokeValue" PopupWidth="160px" DataSource="@BorderStyles">
                        <DropDownListTemplates TItem="BorderStylesFields">
                            <ItemTemplate>
                                <div class='db-ddl-template-style'>
                                    <span class=@((context as BorderStylesFields).ClassName)></span>
                                </div>
                            </ItemTemplate>
                            <ValueTemplate>
                                <div class='db-ddl-template-style'>
                                    <span class=@((context as BorderStylesFields).ClassName)></span>
                                </div>
                            </ValueTemplate>
                        </DropDownListTemplates>
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="BorderStylesFields" ValueChange="@OnStrokeDashArrayChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-xs-4 db-col-right">
                    <SfNumericTextBox ID="lineWidth" Min="0.5" Step="0.5"  ValidateDecimalOnType="true" Decimals=2 Value="@ConnectorStrokeWidth">
                        <NumericTextBoxEvents TValue="double" ValueChange="@OnStrokeWidthChange"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-8 db-col-left db-prop-text-style">
                    <span class="db-prop-text-style">Start Arrow</span>
                </div>
                <div class="col-xs-4 db-col-right db-prop-text-style">
                    <span class="db-prop-text-style">Size</span>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-8 db-col-left">
                    <SfDropDownList ID="sourceType" TValue="string" TItem="DecoratorListFields" PopupWidth="160px" DataSource="@DecoratorList" @bind-Value="@ConnectorSrcShape">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="DecoratorListFields" ValueChange="@OnConnectorSourceShapeChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-xs-4 db-col-right">
                    <SfNumericTextBox ID="sourceSize" Min="1" Step="1"  ValidateDecimalOnType="true" Decimals=0 Value="@ConnectorSrcShapeSize">
                        <NumericTextBoxEvents TValue="double" ValueChange="@OnConnectorSourceShapeSizeChange"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-8 db-col-left db-prop-text-style">
                    <span class="db-prop-text-style">End Arrow</span>
                </div>
                <div class="col-xs-4 db-col-right db-prop-text-style">
                    <span class="db-prop-text-style">Size</span>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-8 db-col-left">
                    <SfDropDownList ID="targetType" TValue="string" TItem="DecoratorListFields" PopupWidth="160px" DataSource="@DecoratorList" @bind-Value="@ConnectortarShape">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="DecoratorListFields" ValueChange="@OnConnectorTargetShapeChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-xs-4 db-col-right">
                    <SfNumericTextBox ID="targetSize" Min="1" Step="1"  ValidateDecimalOnType="true" Decimals=0 Value="@ConnectortarShapeSize">
                        <NumericTextBoxEvents TValue="double" ValueChange="@OnConnectorTargetShapeSizeChange"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-8 db-col-left" style="margin-top:5px">
                    <SfCheckBox ID="lineJump" Label="Bridging" @bind-Checked="@OnConnectorBridge" @onchange="@OnConnectorBridgingChange"></SfCheckBox>
                </div>
                <div class="col-xs-4 db-col-right" id="lineJumpSizeDiv" style="display:none">
                    <SfNumericTextBox ID="lineJumpSize" Min="1" Step="1"  ValidateDecimalOnType="true" Decimals=0 Value="@ConnectorBridgeSize">
                        <NumericTextBoxEvents TValue="double" ValueChange="@OnConnectorBridgeSizeChange"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-2 db-col-right db-prop-text-style" style="padding-top: 6px">
                    <span class="db-prop-text-style">Opacity</span>
                </div>
                <div class="col-xs-8 db-col-left" style="padding-right:10px">
                    <SfSlider ID="connectorOpacitySlider" Type="SliderType.MinRange" Value="@ConnectorOpacity" Min="0" Max="100" Step="10">
                        <SliderEvents TValue="double" OnChange="@(e => { OnConnectorOpacityChange(e.Value); })"></SliderEvents>
                    </SfSlider>
                </div>
                <div class="col-xs-2 db-col-right">
                    <input type="text" id="connectorOpacitySliderText" value='100%' readonly="readonly" class="db-readonly-input" />
                </div>
            </div>
        </div>
        <div id='textPropertyContainer' class="db-text-prop-container" style="display:none">
            <div class="db-prop-separator">
            </div>
            <div class="row db-prop-header-text">
                Text
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-8 db-col-left">
                    <SfDropDownList ID="fontFamily" TValue="string" TItem="FontFamilyListFields" DataSource="@FontFamilyList" @bind-Value="@TextFontFamily">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="FontFamilyListFields" ValueChange="@OnFontFamilyChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-xs-4 db-col-right">
                    <SfNumericTextBox ID="fontSizeTextProperties" Min="1" Step="1"  ValidateDecimalOnType="true" Decimals=0 Value="@TextFontSize">
                        <NumericTextBoxEvents TValue="double" ValueChange="@OnTextFontSizeChanged"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-6 db-col-left" id="textPositionDiv">
                    <SfDropDownList ID="ddlTextPosition" TValue="string" TItem="TextPositionFields" DataSource="@TextPosition" @bind-Value="@TextPositionValue">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="TextPositionFields" ValueChange="@OnTextPositionChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-xs-6 db-col-right" id="textColorDiv">
                    <div class="db-color-container">
                        <div class="db-color-input">
                            <SfColorPicker ID="textColor" Value="@TextColor" Mode="ColorPickerMode.Palette" ValueChange="@OnTextColorChange"></SfColorPicker>>
                        </div>
                        <div class="db-color-btn">
                            <SfButton ID="fontColorBtn" IconCss="sf-icon-ColorPickers tb-icons"></SfButton>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-6 db-col-left">
                    <SfToolbar ID="toolbarTextStyle" OverflowMode="@OverflowMode.Scrollable">
                        <ToolbarEvents Clicked="@OnTextStyleClick"></ToolbarEvents>
                        <ToolbarItems>
                            <ToolbarItem PrefixIcon="sf-icon-Bold tb-icons" TooltipText="Bold" CssClass="@BoldCss"></ToolbarItem>
                            <ToolbarItem PrefixIcon="sf-icon-Italic tb-icons" TooltipText="Italic" CssClass="@ItalicCss"></ToolbarItem>
                            <ToolbarItem PrefixIcon="sf-icon-Underline tb-icons" TooltipText="Underline" CssClass="@UnderlineCss"></ToolbarItem>
                        </ToolbarItems>
                    </SfToolbar>
                </div>
                <div class="col-xs-6 db-col-right">
                    <SfToolbar ID="toolbarTextSubAlignment" OverflowMode="@OverflowMode.Scrollable">
                        <ToolbarEvents Clicked="@OnTextSubAlignmentClick"></ToolbarEvents>
                        <ToolbarItems>
                            <ToolbarItem PrefixIcon="sf-icon-ParaAlignLeft tb-icons" TooltipText="Align Text Left" CssClass="@AlignTextLeftCss"></ToolbarItem>
                            <ToolbarItem PrefixIcon="sf-icon-ParaAlignCenter tb-icons" TooltipText="Align Text Center" CssClass="@AlignTextCenterCss"></ToolbarItem>
                            <ToolbarItem PrefixIcon="sf-icon-ParaAlignRight tb-icons" TooltipText="Align Text Right" CssClass="@AlignTextRightCss"></ToolbarItem>
                        </ToolbarItems>
                    </SfToolbar>
                </div>
            </div>
            <div class="row db-prop-row" id='toolbarTextAlignmentDiv'>
                <SfToolbar ID="toolbarTextAlignment" OverflowMode="@OverflowMode.Scrollable">
                    <ToolbarEvents Clicked="@OnTextAlignmentClick"></ToolbarEvents>
                    <ToolbarItems>
                        <ToolbarItem PrefixIcon="sf-icon-TextLeft tb-icons" TooltipText="Align Right" CssClass="@HorAlignRightCss"></ToolbarItem>
                        <ToolbarItem PrefixIcon="sf-icon-TextVerticalCenter tb-icons" TooltipText="Align Center" CssClass="@HorAlignCenterCss"></ToolbarItem>
                        <ToolbarItem PrefixIcon="sf-icon-TextRight tb-icons" TooltipText="Align Left" CssClass="@HorAlignLeftCss"></ToolbarItem>
                        <ToolbarItem PrefixIcon="sf-icon-TextTop tb-icons" TooltipText="Align Bottom" CssClass="@VerAlignBottomCss"></ToolbarItem>
                        <ToolbarItem PrefixIcon="sf-icon-TextHorizontalCenter tb-icons" TooltipText="Align Middle" CssClass="@VerAlignMiddleCss"></ToolbarItem>
                        <ToolbarItem PrefixIcon="sf-icon-TextBottom tb-icons" TooltipText="Align Top" CssClass="@VerAlignTopCss"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
            </div>
            <div class="row db-prop-row">
                <div class="col-xs-2 db-col-right db-prop-text-style" style="padding-top: 6px">
                    <span class="db-prop-text-style">Opacity</span>
                </div>
                <div class="col-xs-8 db-col-left" style="padding-right:10px">
                    <SfSlider ID="textOpacitySlider" Type="SliderType.MinRange" Value="@TextOpacity" Min="0" Max="100" Step="10">
                        <SliderEvents TValue="double" OnChange="@(e => { OnTextOpacityChange(e.Value); })"></SliderEvents>
                    </SfSlider>
                </div>
                <div class="col-xs-2 db-col-right">
                    <input id='textOpacityText' type="text" value='100%' class="db-readonly-input" readOnly="readonly" />
                </div>
            </div>
        </div>
        <SfDialog ID="insert_link_dialog" @ref="@TextHyperLink" @bind-Visible="@InsertLinkVisible" Width="400px" ShowCloseIcon="true" IsModal="true">
            <DialogTemplates>
                <Header>
                    Insert Link
                </Header>
                <Content>
                    <div id="hyperlinkDialogContent">
                        <div class="row">
                            <div class="row">Enter URL</div><div class="row db-dialog-child-prop-row">
                                <input type="text" id="hyperlink">
                            </div>
                        </div><div class="row db-dialog-prop-row">
                            <div class="row">Link Text (Optional)</div>
                            <div class="row db-dialog-child-prop-row"><input type="text" id="hyperlinkText"></div>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton OnClick="@ApplyAnnotationLink"  Content="Apply" IsPrimary="true" CssClass="e-flat e-db-primary">
                </DialogButton>
                <DialogButton OnClick="@CancelAnnotationLink"Content="Cancel" IsPrimary="true" CssClass="e-flat">
                </DialogButton>
            </DialogButtons>
        </SfDialog>
    </div>

@code {
    internal DiagramMain Parent;

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    SfDialog TextHyperLink;

    // Page Settings
    #region
    public class PaperListFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
    public List<PaperListFields> PaperList = new List<PaperListFields>()
    {
        new PaperListFields(){ Text= "Letter (8.5 in x 11 in)", Value= "Letter", },
        new PaperListFields(){ Text= "Legal (8.5 in x 14 in)", Value= "Legal" },
        new PaperListFields(){ Text= "Tabloid (279 mm x 432 mm)", Value="Tabloid" },
        new PaperListFields(){ Text= "A3 (297 mm x 420 mm)", Value="A3" },
        new PaperListFields(){ Text= "A4 (210 mm x 297 mm)", Value="A4" },
        new PaperListFields(){ Text= "A5 (148 mm x 210 mm)", Value="A5" },
        new PaperListFields(){ Text= "A6 (105 mm x 148 mm)", Value="A6" },
        new PaperListFields(){ Text= "Custom", Value="Custom"}
    };
    #endregion

    // Node Properties
    #region
    public class GradientDirectionsFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
    public List<GradientDirectionsFields> GradientDirections = new List<GradientDirectionsFields>()
    {
        new GradientDirectionsFields() { Text= "BottomToTop", Value="BottomToTop" },
        new GradientDirectionsFields() { Text= "TopToBottom", Value="TopToBottom" },
        new GradientDirectionsFields() { Text= "RightToLeft", Value="RightToLeft" },
        new GradientDirectionsFields() { Text= "LeftToRight", Value="LeftToRight" }
    };

    public class BorderStylesFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
        public string ClassName { get; set; }
    }
    public List<BorderStylesFields> BorderStyles = new List<BorderStylesFields>()
    {
        new BorderStylesFields() { Text= "None", Value="None", ClassName="ddl-svg-style ddl_linestyle_none" },
        new BorderStylesFields() { Text= "1,2", Value="1,2", ClassName="ddl-svg-style ddl_linestyle_one_two" },
        new BorderStylesFields() { Text= "3,3", Value="3,3", ClassName="ddl-svg-style ddl_linestyle_three_three" },
        new BorderStylesFields() { Text= "5,3", Value="5,3", ClassName="ddl-svg-style ddl_linestyle_five_three" },
        new BorderStylesFields() { Text= "4,4,1", Value="4,4,1", ClassName="ddl-svg-style ddl_linestyle_four_four_one" }
    };
    #endregion

    // Connector Properties
    #region
    public class LineTypeFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }
    public List<LineTypeFields> LineType = new List<LineTypeFields>() {
        new LineTypeFields(){ Text= "Straight", Value= "Straight", },
        new LineTypeFields(){ Text= "Orthogonal", Value= "Orthogonal" },
        new LineTypeFields(){ Text= "Bezier", Value="Bezier" }
    };

    public class DecoratorListFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public List<DecoratorListFields> DecoratorList = new List<DecoratorListFields>()
    {
        new DecoratorListFields(){ Text= "None", Value= "None", },
        new DecoratorListFields(){ Text= "Arrow", Value= "Arrow" },
        new DecoratorListFields(){ Text= "Diamond", Value="Diamond" },
        new DecoratorListFields(){ Text= "OpenArrow", Value= "OpenArrow", },
        new DecoratorListFields(){ Text= "Circle", Value= "Circle" },
        new DecoratorListFields(){ Text= "Square", Value="Square" },
        new DecoratorListFields(){ Text= "Fletch", Value= "Fletch", },
        new DecoratorListFields(){ Text= "OpenFetch", Value= "OpenFetch" },
        new DecoratorListFields(){ Text= "IndentedArrow", Value="IndentedArrow" },
        new DecoratorListFields(){ Text= "OutdentedArrow", Value= "OutdentedArrow", },
        new DecoratorListFields(){ Text= "DoubleArrow", Value= "DoubleArrow" }
    };
    #endregion

    // Text Properties
    #region
    public class FontFamilyListFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public List<FontFamilyListFields> FontFamilyList = new List<FontFamilyListFields>()
    {
        new FontFamilyListFields(){ Text= "Arial", Value= "Arial", },
        new FontFamilyListFields(){ Text= "Aharoni", Value= "Aharoni" },
        new FontFamilyListFields(){ Text= "Bell MT", Value="Bell MT" },
        new FontFamilyListFields(){ Text= "Fantasy", Value= "Fantasy" },
        new FontFamilyListFields(){ Text= "Times New Roman", Value= "Times New Roman" },
        new FontFamilyListFields(){ Text= "Segoe UI", Value="Segoe UI" },
        new FontFamilyListFields(){ Text= "Verdana", Value= "Verdana" }
    };

    public class TextPositionFields
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public List<TextPositionFields> NodeTextPosition = new List<TextPositionFields>()
    {
        new TextPositionFields(){ Text= "TopLeft", Value= "TopLeft", },
        new TextPositionFields(){ Text= "TopCenter", Value= "TopCenter" },
        new TextPositionFields(){ Text= "TopRight", Value="TopRight" },
        new TextPositionFields(){ Text= "MiddleLeft", Value= "MiddleLeft", },
        new TextPositionFields(){ Text= "Center", Value= "Center" },
        new TextPositionFields(){ Text= "MiddleRight", Value="MiddleRight" },
        new TextPositionFields(){ Text= "BottomLeft", Value= "BottomLeft" },
        new TextPositionFields(){ Text= "BottomCenter", Value= "BottomCenter" },
        new TextPositionFields(){ Text= "BottomRight", Value="BottomRight" }
    };

    public List<TextPositionFields> ConnectorTextPosition = new List<TextPositionFields>()
    {
        new TextPositionFields(){ Text= "Left", Value= "Left", },
        new TextPositionFields(){ Text= "Center", Value= "Center" },
        new TextPositionFields(){ Text= "Right", Value="Right" }
    };

    #endregion

    #region

    public string BoldCss = "tb-item-start";
    public string ItalicCss = "tb-item-middle";
    public string UnderlineCss = "tb-item-end";

    public string AlignTextLeftCss = "tb-item-start";
    public string AlignTextCenterCss = "tb-item-middle";
    public string AlignTextRightCss = "tb-item-end";


    public string HorAlignRightCss = "tb-item-start";
    public string HorAlignCenterCss = "tb-item-middle";
    public string HorAlignLeftCss = "tb-item-middle";
    public string VerAlignBottomCss = "tb-item-middle";
    public string VerAlignMiddleCss = "tb-item-middle";
    public string VerAlignTopCss = "tb-item-end";

    public bool PreventPropertyChange { get; set; }

    public bool InsertLinkVisible { get; set; } = false;

    public double NodeOffsetX { get; set; }
    public double NodeOffsetY { get; set; }
    public double NodeWidth { get; set; }
    public double NodeHeight { get; set; }
    public bool NodeAspectRatio { get; set; }
    public double NodeRotateAngle { get; set; }

    public string NodeFillColor { get; set; }
    public bool IsGradient { get; set; }
    public string NodeGradientColor { get; set; }
    public string NodeGradientDirection { get; set; } = "";
    public string NodeStrokeColor { get; set; }
    public string NodeStrokeDashArray { get; set; } = "1,2";
    public double NodeStrokeWidth { get; set; }
    public double NodeOpacity { get; set; }
    public int NodeGradientDircIndex { get; set; } = 0;
    public int NodeStrokeValue { get; set; } = 0;

    // Text properties
    public string TextFontFamily { get; set; } = "";
    public string TextPositionValue { get; set; } = null;
    public string TextColor { get; set; }
    public double TextFontSize { get; set; }
    public double TextOpacity { get; set; }
    List<TextPositionFields> TextPosition  { get; set; }

    // Connector Properties
    public string ConnectorType { get; set; } = "";
    public string ConnectorStrokeColor { get; set; }
    public string ConnectorStrokeDashArray { get; set; } = "1,2";
    public double ConnectorStrokeWidth { get; set; }
    public string ConnectorSrcShape { get; set; } = "";
    public double ConnectorSrcShapeSize { get; set; }
    public string ConnectortarShape { get; set; } = "";
    public double ConnectortarShapeSize { get; set; }
    public bool OnConnectorBridge { get; set; }
    public double ConnectorBridgeSize { get; set; }
    public double ConnectorOpacity { get; set; }
    public int ConnectorStrokeValue { get; set; } = 0;

    // Diagram Properties
    public string PaperListValue { get; set; } = "Letter";
    public bool PagePortraitValue { get; set; } = false;
    public bool PageLandscapeValue { get; set; } = true;
    public string PageBgColorValue { get; set; } = "#ffffffff";
    public bool ShowPageBreaksValue { get; set; } = false;
    public double PageWidth { get; set; } = 1056;
    public double PageHeight { get; set; } = 816;

    #endregion

    public void SingleNodeSelection()
    {
        TextPosition = NodeTextPosition;

        DiagramNode node = Parent.DiagramContent.Diagram.SelectedItems.Nodes[0];
        if (node != null)
        {
            NodeOffsetX = node.OffsetX;
            NodeOffsetY = node.OffsetY;
            NodeWidth = node.Width;
            NodeHeight = node.Height;
            NodeAspectRatio = ((node.Constraints & NodeConstraints.AspectRatio) != 0) ? true : false;
            NodeRotateAngle = node.RotateAngle;

            NodeStrokeWidth = node.Style.StrokeWidth;
            NodeOpacity = node.Style.Opacity * 100;
            NodeStrokeDashArray = node.Style.StrokeDashArray;

            if (!node.Style.Fill.Contains("#"))
            {
                int ColorValue = Color.FromName(node.Style.Fill).ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                NodeFillColor = "#" + ColorHex.Substring(2);
            }
            else
            {
                NodeFillColor = node.Style.Fill;
            }

            if (!node.Style.StrokeColor.Contains("#"))
            {
                int ColorValue = Color.FromName(node.Style.StrokeColor).ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                NodeStrokeColor = "#" + ColorHex.Substring(2);
            }
            else
            {
                NodeStrokeColor = node.Style.StrokeColor;
            }
            UpdateNodeStrokeValue(NodeStrokeDashArray.ToString());
            if (node.Shape.Type == Shapes.Text && node.Shape.TextContent != "")
            {
                jsRuntime.InvokeAsync<object>("objectTypeChange", "annotation", true);
                BindTextContentStyleProperties(node.Style);
            }
            if (node.Annotations.Count > 0 && node.Annotations[0].Content != "")
            {
                jsRuntime.InvokeAsync<object>("objectTypeChange", "annotation");
                BindNodeAnnotationProperties(node.Annotations[0]);
            }
            if (node.Style.Gradient.Type == GradientType.Linear)
            {
                IsGradient = true;
                jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "gradientStyle", true);
                NodeGradientDirection = GetGradientDirection(node.Style.Gradient);
                if (!node.Style.Gradient.Stops[1].Color.Contains("#"))
                {
                    int ColorValue = Color.FromName(node.Style.Gradient.Stops[1].Color).ToArgb();
                    string ColorHex = string.Format("{0:x6}", ColorValue);
                    NodeGradientColor = "#" + ColorHex.Substring(2);
                }
                else
                {
                    NodeGradientColor = node.Style.Gradient.Stops[1].Color;
                }
            }
            else
            {
                IsGradient = false;
                jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "gradientStyle", false);
                int ColorValue = Color.FromName("white").ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                NodeGradientColor = "#" + ColorHex.Substring(2);
            }
        }
        StateHasChanged();
    }

    public void SingleConnectorSelection()
    {
        TextPosition = ConnectorTextPosition;

        DiagramConnector Connector = Parent.DiagramContent.Diagram.SelectedItems.Connectors[0];
        if (Connector != null)
        {
            ConnectorType = Connector.Type.ToString();
            if (!Connector.Style.StrokeColor.Contains("#"))
            {
                int ColorValue = Color.FromName(Connector.Style.StrokeColor).ToArgb();
                string ColorHex = string.Format("{0:x6}", ColorValue);
                ConnectorStrokeColor = "#" + ColorHex.Substring(2);
            }
            else
            {
                ConnectorStrokeColor = Connector.Style.StrokeColor;
            }
            ConnectorStrokeDashArray = (Connector.Style.StrokeDashArray == "") ? "None" : Connector.Style.StrokeDashArray;
            ConnectorStrokeWidth = Connector.Style.StrokeWidth;

            ConnectortarShape = Connector.TargetDecorator.Shape.ToString();
            ConnectortarShapeSize = (Connector.TargetDecorator.Width > Connector.TargetDecorator.Height) ? Connector.TargetDecorator.Width : Connector.TargetDecorator.Height;
            ConnectorSrcShape = Connector.SourceDecorator.Shape.ToString();
            ConnectorSrcShapeSize = (Connector.SourceDecorator.Width > Connector.SourceDecorator.Height) ? Connector.SourceDecorator.Width : Connector.SourceDecorator.Height;
            OnConnectorBridge = ((Connector.Constraints & ConnectorConstraints.Bridging) != 0) ? true : false;
            jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "lineJumpSizeDiv", OnConnectorBridge);
            ConnectorBridgeSize = Connector.BridgeSpace;
            ConnectorOpacity = Connector.Style.Opacity * 100;

            if (Connector.Annotations.Count > 0 && Connector.Annotations[0].Content != "")
            {
                jsRuntime.InvokeAsync<object>("objectTypeChange", "annotation");
                BindConnectorAnnotationProperties(Connector.Annotations[0]);
            }
        }
        StateHasChanged();
    }

    public void BindNodeAnnotationProperties(DiagramNodeAnnotation Annotation)
    {
        TextPositionValue = GetNodeTextPositionValue(Annotation.Offset);
        BindAnnotationStyleProperties(Annotation.Style);
        BindAnnotationAlignProperties(Annotation.HorizontalAlignment, Annotation.VerticalAlignment);
    }

    public void BindAnnotationAlignProperties(HorizontalAlignment HorizontalAlig, VerticalAlignment VerticalAlig)
    {
        HorAlignLeftCss = (HorizontalAlig == HorizontalAlignment.Left) ? HorAlignLeftCss + " tb-item-selected" : HorAlignLeftCss.Replace(" tb-item-selected", "");
        HorAlignCenterCss = (HorizontalAlig == HorizontalAlignment.Center) ? HorAlignCenterCss + " tb-item-selected" : HorAlignCenterCss.Replace(" tb-item-selected", "");
        HorAlignRightCss = (HorizontalAlig == HorizontalAlignment.Right) ? HorAlignRightCss + " tb-item-selected" : HorAlignRightCss.Replace(" tb-item-selected", "");

        VerAlignBottomCss = (VerticalAlig == VerticalAlignment.Bottom) ? VerAlignBottomCss + " tb-item-selected" : VerAlignBottomCss.Replace(" tb-item-selected", "");
        VerAlignMiddleCss = (VerticalAlig == VerticalAlignment.Center) ? VerAlignMiddleCss + " tb-item-selected" : VerAlignMiddleCss.Replace(" tb-item-selected", "");
        VerAlignTopCss = (VerticalAlig == VerticalAlignment.Top) ? VerAlignTopCss + " tb-item-selected" : VerAlignTopCss.Replace(" tb-item-selected", "");
    }
    public void BindAnnotationStyleProperties(AnnotationStyle Style)
    {
        TextFontFamily = Style.FontFamily;
        TextFontSize = Style.FontSize;
        if (!Style.Color.Contains("#"))
        {
            int ColorValue = Color.FromName(Style.Color).ToArgb();
            string ColorHex = string.Format("{0:x6}", ColorValue);
            TextColor = "#" + ColorHex.Substring(2);
        }
        else
        {
            TextColor = Style.Color;
        }
        TextOpacity = Style.Opacity * 100;

        BoldCss = (Style.Bold) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
        ItalicCss = (Style.Italic) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
        UnderlineCss = (Style.TextDecoration == TextDecoration.Underline) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");

        AlignTextLeftCss = (Style.TextAlign == TextAlign.Left) ? AlignTextLeftCss + " tb-item-selected" : AlignTextLeftCss.Replace(" tb-item-selected", "");
        AlignTextCenterCss = (Style.TextAlign == TextAlign.Center) ? AlignTextCenterCss + " tb-item-selected" : AlignTextCenterCss.Replace(" tb-item-selected", "");
        AlignTextRightCss = (Style.TextAlign == TextAlign.Right) ? AlignTextRightCss + " tb-item-selected" : AlignTextRightCss.Replace(" tb-item-selected", "");
    }
    public void BindTextContentStyleProperties(NodeShapeStyle Style)
    {
        TextFontFamily = Style.FontFamily;
        TextFontSize = Style.FontSize;
        if (!Style.Color.Contains("#"))
        {
            int ColorValue = Color.FromName(Style.Color).ToArgb();
            string ColorHex = string.Format("{0:x6}", ColorValue);
            TextColor = "#" + ColorHex.Substring(2);
        }
        else
        {
            TextColor = Style.Color;
        }
        TextOpacity = Style.Opacity * 100;

        BoldCss = (Style.Bold) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
        ItalicCss = (Style.Italic) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
        UnderlineCss = (Style.TextDecoration == TextDecoration.Underline) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");

        AlignTextLeftCss = (Style.TextAlign == TextAlign.Left) ? AlignTextLeftCss + " tb-item-selected" : AlignTextLeftCss.Replace(" tb-item-selected", "");
        AlignTextCenterCss = (Style.TextAlign == TextAlign.Center) ? AlignTextCenterCss + " tb-item-selected" : AlignTextCenterCss.Replace(" tb-item-selected", "");
        AlignTextRightCss = (Style.TextAlign == TextAlign.Right) ? AlignTextRightCss + " tb-item-selected" : AlignTextRightCss.Replace(" tb-item-selected", "");
    }
    public void BindConnectorAnnotationProperties(DiagramConnectorAnnotation Annotation)
    {
        TextPositionValue = GetConnectorTextPositionValue(Annotation.Offset);
        BindAnnotationStyleProperties(Annotation.Style);
        BindAnnotationAlignProperties(Annotation.HorizontalAlignment, Annotation.VerticalAlignment);
    }

    public void BindDiagramProperties()
    {
        DiagramPageSettings PageSettings = Parent.DiagramContent.Diagram.PageSettings;
        PagePortraitValue = (PageSettings.Orientation == PageOrientation.Portrait) ? true : false;
        PageLandscapeValue = (PageSettings.Orientation == PageOrientation.Landscape) ? true : false;
        if (!PageSettings.Background.Color.Contains("#"))
        {
            int ColorValue = Color.FromName(PageSettings.Background.Color).ToArgb();
            string ColorHex = string.Format("{0:x6}", ColorValue);
            PageBgColorValue = "#" + ColorHex.Substring(2);
        }
        else
        {
            PageBgColorValue = PageSettings.Background.Color;
        }
        ShowPageBreaksValue = PageSettings.ShowPageBreaks;
        StateHasChanged();
    }

    public void OnNodeOffsetXChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        NodeOffsetX = args.Value;
        OnUpdateNodeProperties("OffsetX", args.Value.ToString());
    }

    public void OnNodeOffsetYChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        NodeOffsetY = args.Value;
        OnUpdateNodeProperties("OffsetY", args.Value.ToString());
    }

    public void OnNodeWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        NodeWidth = args.Value;
        OnUpdateNodeProperties("Width", args.Value.ToString());
    }

    public void OnNodeHeightChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        NodeHeight = args.Value;
        OnUpdateNodeProperties("Height", args.Value.ToString());
    }

    public void OnChangeAspectRatio(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            if ((bool)args.Value == true)
            {
                Nodes[i].Constraints |= NodeConstraints.AspectRatio;
            }
            else
            {
                Nodes[i].Constraints &= ~NodeConstraints.AspectRatio;
            }
        }
    }

    public void OnFillColorChange(ColorPickerEventArgs args)
    {
        OnUpdateNodeProperties("Fill", (args.CurrentValue).Hex);
    }

    public void OnStrokeColorChange(ColorPickerEventArgs args)
    {
        OnUpdateNodeProperties("StrokeColor", (args.CurrentValue).Hex);
        OnUpdateConnectorProperties("StrokeColor", (args.CurrentValue).Hex);
    }

    public void OnStrokeDashArrayChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, BorderStylesFields> args)
    {
        OnUpdateNodeProperties("StrokeDashArray", args.Value == "None" ? "":args.Value);
        OnUpdateConnectorProperties("StrokeDashArray", args.Value == "None" ? "":args.Value);
    }

    public void OnNodeOpacityChange(double Value)
    {
        OnUpdateNodeProperties("Opacity", (Value / 100).ToString());
        OnUpdateConnectorProperties("Opacity", (Value / 100).ToString());
    }

    public void OnNodeRotateAngleChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        NodeRotateAngle = args.Value;
        OnUpdateNodeProperties("RotateAngle", args.Value.ToString());
    }

    public void OnStrokeWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        OnUpdateNodeProperties("StrokeWidth", args.Value.ToString());
        OnUpdateConnectorProperties("StrokeWidth", args.Value.ToString());
    }

    public void OnGradientDirectionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, GradientDirectionsFields> args)
    {
        NodeGradientDirection = args.Value;
        OnUpdateNodeProperties("GradientDirection", args.Value);
    }

    public void OnNodeGradientColorChange(ColorPickerEventArgs args)
    {
        string Color = (args.CurrentValue).Hex;
        NodeGradientColor = Color;
        OnUpdateNodeProperties("GradientColor", Color);
    }


    public ObservableCollection<DiagramNode> OnSelectedNode()
    {
        ObservableCollection<DiagramNode> NodesCollection = new ObservableCollection<DiagramNode>();
        SfDiagram Diagram = Parent.DiagramContent.Diagram;
        DiagramSelectedItems SelectedItems = Diagram.SelectedItems;
        for (int i = 0; i < SelectedItems.Nodes.Count; i++)
        {
            NodesCollection.Add(Diagram.GetNode(SelectedItems.Nodes[i].Id));
        }
        return NodesCollection;
    }

    public void EnableGradient(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        bool Value = (bool)args.Value;
        jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "gradientStyle", Value);
        OnUpdateNodeProperties("Gradient", ((!Value) ? "false" : "true"));
    }

    public void OnUpdateNodeProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
            if (Nodes.Count > 0)
            {
                DiagramNode Node = Nodes[0];
                switch (prop)
                {
                    case "OffsetX":
                        Node.OffsetX = Double.Parse(Value);
                        break;
                    case "OffsetY":
                        Node.OffsetY = Double.Parse(Value);
                        break;
                    case "Width":
                        Node.Width = Double.Parse(Value);
                        break;
                    case "Height":
                        Node.Height = Double.Parse(Value);
                        break;
                    case "RotateAngle":
                        Node.RotateAngle = Double.Parse(Value);
                        break;
                }
                for (int i = 0; i < Nodes.Count; i++)
                {
                    Node = Nodes[i];
                    switch (prop)
                    {
                        case "Fill":
                            Node.Style.Fill = Value;
                            NodeFillColor = Value;
                            StateHasChanged();
                            break;
                        case "StrokeColor":
                            NodeStrokeColor = Value;
                            Node.Style.StrokeColor = Value;
                            StateHasChanged();
                            break;
                        case "StrokeDashArray":
                            Node.Style.StrokeDashArray = Value;
                            UpdateNodeStrokeValue(Value);
                            break;
                        case "StrokeWidth":
                            NodeStrokeWidth = Double.Parse(Value);
                            Node.Style.StrokeWidth = Double.Parse(Value);
                            break;
                        case "Opacity":
                            Node.Style.Opacity = Double.Parse(Value);
                            break;
                        case "Gradient":
                            if (Value == "false")
                            {
                                Node.Style.Gradient.Type = GradientType.None;
                            }
                            else
                            {
                                GetGradient(NodeGradientDirection, NodeGradientColor);
                            }
                            break;
                        case "GradientDirection":
                        case "GradientColor":
                            GetGradient(NodeGradientDirection, NodeGradientColor);
                            break;
                    }
                    if (Node.Shape.Type == Shapes.Text)
                    {
                        switch (prop)
                        {
                            case "FontFamily":
                                Node.Style.FontFamily = Value;
                                break;
                            case "FontSize":
                                Node.Style.FontSize = Int32.Parse(Value);
                                break;
                            case "FontColor":
                                Node.Style.Color = Value;
                                break;
                            case "Opacity":
                                Node.Style.Opacity = Double.Parse(Value);
                                break;
                            case "Bold":
                                Node.Style.Bold = !Node.Style.Bold;
                                break;
                            case "Italic":
                                Node.Style.Italic = !Node.Style.Italic;
                                break;
                            case "Underline":
                                Node.Style.TextDecoration = (Node.Style.TextDecoration == TextDecoration.Underline) ? TextDecoration.None : TextDecoration.Underline;
                                break;
                            case "Align Text Left":
                                Node.Style.TextAlign = TextAlign.Left;
                                break;
                            case "Align Text Center":
                                Node.Style.TextAlign = TextAlign.Center;
                                break;
                            case "Align Text Right":
                                Node.Style.TextAlign = TextAlign.Right;
                                break;
                        }
                    }
                }
            }
        }
    }
private void UpdateNodeStrokeValue(string strokeVal)
    {
        switch (strokeVal)
        {
            case "1,2":
                NodeStrokeDashArray = "1,2";
                NodeStrokeValue = 1;
                break;
            case "3,3":
                NodeStrokeDashArray = "3,3";
               NodeStrokeValue = 2;
                break;
            case "5,3":
                NodeStrokeDashArray = "5,3";
                NodeStrokeValue = 3;
                break;
            case "4,4,1":
                NodeStrokeDashArray = "4,4,1";
                NodeStrokeValue = 4;
                break;
            default:
                NodeStrokeDashArray = "";
                NodeStrokeValue = 0;
                break;
        }
    }
    private void UpdateConnectorStrokeValue(string strokeVal)
    {
        switch (strokeVal)
        {
            case "1,2":
                ConnectorStrokeDashArray = "1,2";
                ConnectorStrokeValue = 1;
                break;
            case "3,3":
                ConnectorStrokeDashArray = "3,3";
                ConnectorStrokeValue = 2;
                break;
            case "5,3":
                ConnectorStrokeDashArray = "5,3";
                ConnectorStrokeValue = 3;
                break;
            case "4,4,1":
                ConnectorStrokeDashArray = "4,4,1";
                ConnectorStrokeValue = 4;
                break;
            default:
                ConnectorStrokeDashArray = "";
                ConnectorStrokeValue = 0;
                break;
        }
    }
    public void GetGradient(string GradientDirection, string ColorValue)
    {
        DiagramGradient gradientValue = GetGradientDirectionValue(GradientDirection);
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            Nodes[i].Style.Gradient = new DiagramGradient()
            {
                Type = GradientType.Linear,
                X1 = gradientValue.X1,
                X2 = gradientValue.X2,
                Y1 = gradientValue.Y1,
                Y2 = gradientValue.Y2,
                Stops = new ObservableCollection<DiagramsGradientStop>()
                {
                    new DiagramsGradientStop(){Color = "#ffffffff", Offset=0},
                    new DiagramsGradientStop(){Color = ColorValue, Offset=1}
                }
            };
        }
    }

    public DiagramGradient GetGradientDirectionValue(string Direction)
    {
        DiagramGradient GradientValue = new DiagramGradient();
        int x1 = 0; int x2 = 0; int y1 = 0; int y2 = 0;
        if (Direction == "LeftToRight")
 {
            x1 = 100;
NodeGradientDircIndex = 3;
        }
        else if (Direction == "BottomToTop")
 {
            y2 = 100;
NodeGradientDircIndex = 0;
        }
        else if (Direction == "RightToLeft")
 {
            x2 = 100;
NodeGradientDircIndex = 2;
        }
        else 
{
            y1 = 100;
NodeGradientDircIndex = 1;
        }
        GradientValue = new DiagramGradient() { X1 = x1, Y1 = y1, X2 = x2, Y2 = y2 };
        return GradientValue;
    }

    public string GetGradientDirection(DiagramGradient GradientValue)
    {
        string direction = "";
        if (GradientValue.Y1 == 0 && GradientValue.Y2 == 0)
        {
            direction = (GradientValue.X1 == 100 && GradientValue.X2 == 0) ? "LeftToRight": "RightToLeft";
            NodeGradientDircIndex = (GradientValue.X1 == 100 && GradientValue.X2 == 0) ? 3 : 2;
        }
        else
        {
            direction = (GradientValue.Y1 == 100 && GradientValue.Y2 == 0) ? "TopToBottom": "BottomToTop";
            NodeGradientDircIndex = (GradientValue.Y1 == 100 && GradientValue.Y2 == 0) ? 1 : 0;
        }
        return direction;
    }

    private async Task ToolbarInsertClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            DiagramNode Node = Nodes[i];
            if (Node != null)
            {
                switch (commandType)
                {
                    case "Insert Link":
                        await jsRuntime.InvokeAsync<object>("setHyperLinkValuesToDocument", "hyperlink", "");
                        await jsRuntime.InvokeAsync<object>("setHyperLinkValuesToDocument", "hyperlinkText", "");
                        await TextHyperLink.Show();
                        if (Node.Annotations.Count > 0)
                        {
                            DiagramNodeAnnotation Annotation = Node.Annotations[0];
                            if (Annotation.Hyperlink.Link != null || Annotation.Content != null)
                            {
                                string Content = (Annotation.Hyperlink.Content != "") ? Annotation.Hyperlink.Content : Annotation.Content;
                                await jsRuntime.InvokeAsync<object>("setHyperLinkValuesToDocument", "hyperlink", Annotation.Hyperlink.Link);
                                await jsRuntime.InvokeAsync<object>("setHyperLinkValuesToDocument", "hyperlinkText", Content);
                            }
                        }
                        break;
                    case "Insert Image":
                        await Parent.MenuBar.OpenUploadBox(true, "");
                        break;
                }
            }
        }
    }

    public async Task ApplyAnnotationLink()
    {
        SfDiagram Diagram = Parent.DiagramContent.Diagram;
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            if (Nodes[i].Annotations.Count > 0)
            {
                DiagramNodeAnnotation Annotation = Nodes[i].Annotations[0];
                string HyperLink = await jsRuntime.InvokeAsync<string>("getHyperLinkValueFromDocument", "hyperlink", "value");
                string HyperLinkText = await jsRuntime.InvokeAsync<string>("getHyperLinkValueFromDocument", "hyperlinkText", "value");
                Diagram.BeginUpdate();
                Annotation.Hyperlink.Link = HyperLink;
                Annotation.Hyperlink.Content = HyperLinkText;
                Diagram.EndUpdate();
            }
        }
        await TextHyperLink.Hide();
    }

    public async Task CancelAnnotationLink()
    {
        await TextHyperLink.Hide();
    }


    public void OnFontFamilyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FontFamilyListFields> args)
    {
        OnUpdateTextProperties("FontFamily", args.Value);
    }

    public void OnTextFontSizeChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        TextFontSize = args.Value;
        OnUpdateTextProperties("FontSize", args.Value.ToString());
    }

    public void OnTextPositionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TextPositionFields> args)
    {
        OnUpdateTextProperties("TextPosition", args.Value);
    }

    public void OnTextColorChange(ColorPickerEventArgs args)
    {
        TextColor = (args.CurrentValue).Hex;
        OnUpdateTextProperties("FontColor", (args.CurrentValue).Hex);
    }

    public void OnTextOpacityChange(double Value)
    {
        OnUpdateTextProperties("Opacity", (Value / 100).ToString());
    }

    public void OnUpdateTextProperties(string prop, string Value)
    {
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        if (Nodes.Count > 0 && Nodes[0].Shape.Type == Shapes.Text)
        {
            OnUpdateNodeProperties(prop, Value);
        }
        else
        {
            OnUpdateNodeTextProperties(prop, Value);
            OnUpdateConnectorTextProperties(prop, Value);
        }
    }

    public void OnUpdateTextContentProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
            for (int i = 0; i < Nodes.Count; i++)
            {
                DiagramNodeAnnotation Annotation = Nodes[i].Annotations[0];
                switch (prop)
                {
                    case "FontFamily":
                        Annotation.Style.FontFamily = Value;
                        break;
                    case "FontSize":
                        Annotation.Style.FontSize = Int32.Parse(Value);
                        break;
                    case "TextPosition":
                        Annotation.Offset = GetNodeAnnotationOffset(Value);
                        break;
                    case "FontColor":
                        Annotation.Style.Color = Value;
                        break;
                    case "Opacity":
                        Annotation.Style.Opacity = Double.Parse(Value);
                        break;
                }
            }
        }
    }

    public void OnUpdateNodeTextProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
            for (int i = 0; i < Nodes.Count; i++)
            {
                DiagramNodeAnnotation Annotation = Nodes[i].Annotations[0];
                switch (prop)
                {
                    case "FontFamily":
                        Annotation.Style.FontFamily = Value;
                        break;
                    case "FontSize":
                        Annotation.Style.FontSize = Int32.Parse(Value);
                        break;
                    case "TextPosition":
                        Annotation.Offset = GetNodeAnnotationOffset(Value);
                        break;
                    case "FontColor":
                        Annotation.Style.Color = Value;
                        break;
                    case "Opacity":
                        Annotation.Style.Opacity = Double.Parse(Value);
                        break;
                }
            }
        }
    }

    public void OnUpdateConnectorTextProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<DiagramConnector> Connectors = OnSelectedConnector();
            for (int i = 0; i < Connectors.Count; i++)
            {
                if (Connectors[i].Annotations.Count > 0)
                {
                    DiagramConnectorAnnotation Annotation = Connectors[i].Annotations[0];
                    switch (prop)
                    {
                        case "FontFamily":
                            Annotation.Style.FontFamily = Value;
                            break;
                        case "FontSize":
                            Annotation.Style.FontSize = Int32.Parse(Value);
                            break;
                        case "TextPosition":
                            Annotation.Offset = GetConnectorAnnotationOffset(Value);
                            break;
                        case "FontColor":
                            Annotation.Style.Color = Value;
                            break;
                        case "Opacity":
                            Annotation.Style.Opacity = Double.Parse(Value);
                            break;
                    }
                }
            }
        }
    }

    private void OnTextStyleClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;

        switch (commandType)
        {
            case "Bold":
                BoldCss = (!BoldCss.Contains(" tb-item-selected")) ? BoldCss + " tb-item-selected" : BoldCss.Replace(" tb-item-selected", "");
                break;
            case "Italic":
                ItalicCss = (!ItalicCss.Contains(" tb-item-selected")) ? ItalicCss + " tb-item-selected" : ItalicCss.Replace(" tb-item-selected", "");
                break;
            case "Underline":
                UnderlineCss = (!UnderlineCss.Contains(" tb-item-selected")) ? UnderlineCss + " tb-item-selected" : UnderlineCss.Replace(" tb-item-selected", "");
                break;
        }
        OnNodeTextStyle(commandType);
        OnConnectorTextStyle(commandType);
    }
    private void OnNodeTextStyle(string commandType)
    {
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            DiagramNode Node = Nodes[i];
            if (Node != null && (Node.Annotations.Count > 0 || Node.Shape.Type == Shapes.Text))
            {
                if(Node.Shape.Type == Shapes.Text){
                    OnUpdateNodeProperties(commandType, "true");
                } else {
                    OnAnnotationTextStyle(commandType, Node.Annotations[0].Style);
                }
            }
        }
    }

    private void OnConnectorTextStyle(string commandType)
    {
        ObservableCollection<DiagramConnector> Connectors = OnSelectedConnector();
        for (int i = 0; i < Connectors.Count; i++)
        {
            DiagramConnector Connector = Connectors[i];
            if (Connector != null && Connector.Annotations.Count > 0)
            {
                OnAnnotationTextStyle(commandType, Connector.Annotations[0].Style);
            }
        }
    }

    private void OnAnnotationTextStyle(string commandType, AnnotationStyle Style) {
        switch (commandType)
        {
            case "Bold":
                Style.Bold = !Style.Bold;
                break;
            case "Italic":
                Style.Italic = !Style.Italic;
                break;
            case "Underline":
                Style.TextDecoration = (Style.TextDecoration == TextDecoration.Underline) ? TextDecoration.None : TextDecoration.Underline;
                break;
            case "Align Text Left":
                Style.TextAlign = TextAlign.Left;
                break;
            case "Align Text Center":
                Style.TextAlign = TextAlign.Center;
                break;
            case "Align Text Right":
                Style.TextAlign = TextAlign.Right;
                break;
        }
    }

    private void OnTextSubAlignmentClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        AlignTextLeftCss = AlignTextLeftCss.Replace(" tb-item-selected", "");
        AlignTextCenterCss = AlignTextCenterCss.Replace(" tb-item-selected", "");
        AlignTextRightCss = AlignTextRightCss.Replace(" tb-item-selected", "");
        switch (commandType)
        {
            case "Align Text Left":
                AlignTextLeftCss += " tb-item-selected";
                break;
            case "Align Text Center":
                AlignTextCenterCss += " tb-item-selected";
                break;
            case "Align Text Right":
                AlignTextRightCss += " tb-item-selected";
                break;
        }
        OnNodeTextStyle(commandType);
        OnConnectorTextStyle(commandType);
    }
    private void OnNodeTextSubAlignment(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            DiagramNode Node = Nodes[i];
            if ((Node != null && Node.Annotations.Count > 0))
            {
                OnAnnotationTextStyle(commandType, Node.Annotations[0].Style);
                DiagramNodeAnnotation NodeAnnotation = Node.Annotations[0];
                switch (commandType)
                {
                    case "Align Text Left":
                        NodeAnnotation.Style.TextAlign = TextAlign.Left;
                        break;
                    case "Align Text Center":
                        NodeAnnotation.Style.TextAlign = TextAlign.Center;
                        break;
                    case "Align Text Right":
                        NodeAnnotation.Style.TextAlign = TextAlign.Right;
                        break;
                }
            }
        }
    }
    private void OnConnectorTextSubAlignment(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        ObservableCollection<DiagramConnector> Connectors = OnSelectedConnector();
        for (int i = 0; i < Connectors.Count; i++)
        {
            DiagramConnector Connector = Connectors[i];
            if ((Connector != null && Connector.Annotations.Count > 0))
            {
                DiagramConnectorAnnotation ConnectorAnnotation = Connector.Annotations[0];
                switch (commandType)
                {
                    case "Align Text Left":
                        ConnectorAnnotation.Style.TextAlign = TextAlign.Left;
                        break;
                    case "Align Text Center":
                        ConnectorAnnotation.Style.TextAlign = TextAlign.Center;
                        break;
                    case "Align Text Right":
                        ConnectorAnnotation.Style.TextAlign = TextAlign.Right;
                        break;
                }
            }
        }
    }

    private void OnTextAlignmentClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        if (commandType == "Align Right" || commandType == "Align Center" || commandType == "Align Left")
        {
            HorAlignLeftCss = HorAlignLeftCss.Replace(" tb-item-selected", "");
            HorAlignCenterCss = HorAlignCenterCss.Replace(" tb-item-selected", "");
            HorAlignRightCss = HorAlignRightCss.Replace(" tb-item-selected", "");
        }
        else {
            VerAlignBottomCss = VerAlignBottomCss.Replace(" tb-item-selected", "");
            VerAlignMiddleCss = VerAlignMiddleCss.Replace(" tb-item-selected", "");
            VerAlignTopCss = VerAlignTopCss.Replace(" tb-item-selected", "");
        }
        switch (commandType)
        {
            case "Align Right":
                HorAlignRightCss += " tb-item-selected";
                break;
            case "Align Center":
                HorAlignCenterCss += " tb-item-selected";
                break;
            case "Align Left":
                HorAlignLeftCss += " tb-item-selected";
                break;
            case "Align Top":
                VerAlignTopCss += " tb-item-selected";
                break;
            case "Align Middle":
                VerAlignMiddleCss += " tb-item-selected";
                break;
            case "Align Bottom":
                VerAlignBottomCss += " tb-item-selected";
                break;
        }
        OnNodeTextAlignment(args);
        OnConnectorTextAlignment(args);
    }
    private void OnNodeTextAlignment(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        ObservableCollection<DiagramNode> Nodes = OnSelectedNode();
        for (int i = 0; i < Nodes.Count; i++)
        {
            DiagramNode Node = Nodes[i];
            if ((Node != null && Node.Annotations.Count > 0))
            {
                DiagramNodeAnnotation NodeAnnotation = Node.Annotations[0];
                switch (commandType)
                {
                    case "Align Right":
                        NodeAnnotation.HorizontalAlignment = HorizontalAlignment.Right;
                        break;
                    case "Align Center":
                        NodeAnnotation.HorizontalAlignment = HorizontalAlignment.Center;
                        break;
                    case "Align Left":
                        NodeAnnotation.HorizontalAlignment = HorizontalAlignment.Left;
                        break;
                    case "Align Top":
                        NodeAnnotation.VerticalAlignment = VerticalAlignment.Top;
                        break;
                    case "Align Middle":
                        NodeAnnotation.VerticalAlignment = VerticalAlignment.Center;
                        break;
                    case "Align Bottom":
                        NodeAnnotation.VerticalAlignment = VerticalAlignment.Bottom;
                        break;
                }
            }
        }
    }
    private void OnConnectorTextAlignment(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        string commandType = args.Item.TooltipText;
        ObservableCollection<DiagramConnector> Connectors = OnSelectedConnector();
        for (int i = 0; i < Connectors.Count; i++)
        {
            DiagramConnector Connector = Connectors[i];
            DiagramConnectorAnnotation ConnectorAnnotation = Connector.Annotations[0];
            switch (commandType)
            {
                case "Align Right":
                    ConnectorAnnotation.HorizontalAlignment = HorizontalAlignment.Right;
                    break;
                case "Align Center":
                    ConnectorAnnotation.HorizontalAlignment = HorizontalAlignment.Center;
                    break;
                case "Align Left":
                    ConnectorAnnotation.HorizontalAlignment = HorizontalAlignment.Left;
                    break;
                case "Align Top":
                    ConnectorAnnotation.VerticalAlignment = VerticalAlignment.Top;
                    break;
                case "Align Middle":
                    ConnectorAnnotation.VerticalAlignment = VerticalAlignment.Center;
                    break;
                case "Align Bottom":
                    ConnectorAnnotation.VerticalAlignment = VerticalAlignment.Bottom;
                    break;
            }
        }
    }

    public class GetCurrentValue
    {
        public string hex { get; set; }
        public string rgba { get; set; }
    }

    public NodeAnnotationOffset GetNodeAnnotationOffset(string Value)
    {
        NodeAnnotationOffset Offset;
        switch (Value)
        {
            case "TopLeft":
                Offset = new NodeAnnotationOffset() { X = 0, Y = 0 };
                break;
            case "TopCenter":
                Offset = new NodeAnnotationOffset() { X = 0.5, Y = 0 };
                break;
            case "TopRight":
                Offset = new NodeAnnotationOffset() { X = 1, Y = 0 };
                break;
            case "MiddleLeft":
                Offset = new NodeAnnotationOffset() { X = 0, Y = 0.5 };
                break;
            case "MiddleRight":
                Offset = new NodeAnnotationOffset() { X = 1, Y = 0.5 };
                break;
            case "BottomLeft":
                Offset = new NodeAnnotationOffset() { X = 0, Y = 1 };
                break;
            case "BottomCenter":
                Offset = new NodeAnnotationOffset() { X = 0.5, Y = 1 };
                break;
            case "BottomRight":
                Offset = new NodeAnnotationOffset() { X = 1, Y = 1 };
                break;
            default:
                Offset = new NodeAnnotationOffset() { X = 0.5, Y = 0.5 };
                break;
        }
        return Offset;
    }

    public string GetNodeTextPositionValue(NodeAnnotationOffset Offset)
    {
        string Position = "Center";
        switch (Offset.Y) {
            case 0:
                switch (Offset.X)
                {
                    case 0:
                        Position = "TopLeft";
                        break;
                    case 0.5:
                        Position = "TopCenter";
                        break;
                    case 1:
                        Position = "TopRight";
                        break;
                }
                break;
            case 0.5:
                switch (Offset.X)
                {
                    case 0:
                        Position = "MiddleLeft";
                        break;
                    case 0.5:
                        Position = "Center";
                        break;
                    case 1:
                        Position = "MiddleRight";
                        break;
                }
                break;
            case 1:
                switch (Offset.X)
                {
                    case 0:
                        Position = "BottomLeft";
                        break;
                    case 0.5:
                        Position = "BottomCenter";
                        break;
                    case 1:
                        Position = "BottomRight";
                        break;
                }
                break;
        }
        return Position;
    }

    public double GetConnectorAnnotationOffset(string Value)
    {
        double Offset;
        switch (Value)
        {
            case "Before":
                Offset = 0;
                break;
            case "Center":
                Offset = 0.5;
                break;
            case "After":
                Offset = 1;
                break;
            default:
                Offset = 0.5;
                break;
        }
        return Offset;
    }

    public string GetConnectorTextPositionValue(double Offset)
    {
        string Position;
        switch (Offset) {
            case 0:
                Position = "Before";
                break;
            case 0.5:
                Position = "Center";
                break;
            case 1:
                Position = "After";
                break;
            default:
                Position = "Center";
                break;
        }
        return Position;
    }


    // Connector Properties

    public void OnConnectorTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, LineTypeFields> args)
    {
        OnUpdateConnectorProperties("Type", args.Value);
    }

    public void OnConnectorOpacityChange(double Value)
    {
        OnUpdateConnectorProperties("Opacity", (Value / 100).ToString());
    }

    public void OnConnectorSourceShapeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DecoratorListFields> args)
    {
        OnUpdateConnectorProperties("SourceDecoratorShape", args.Value);
    }

    public void OnConnectorSourceShapeSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        ConnectorSrcShapeSize = args.Value;
        OnUpdateConnectorProperties("SourceDecoratorSize", args.Value.ToString());
    }

    public void OnConnectorTargetShapeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DecoratorListFields> args)
    {
        OnUpdateConnectorProperties("TargetDecoratorShape", args.Value);
    }

    public void OnConnectorTargetShapeSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        ConnectortarShapeSize = args.Value;
        OnUpdateConnectorProperties("TargetDecoratorSize", args.Value.ToString());
    }

    public void OnConnectorBridgingChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        OnUpdateConnectorProperties("Bridging", args.Value.ToString());
        jsRuntime.InvokeAsync<object>("enablePropertyCheckBox", "lineJumpSizeDiv", args.Value);
    }

    public void OnConnectorBridgeSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        ConnectorBridgeSize = args.Value;
        OnUpdateConnectorProperties("BridgeSpace", args.Value.ToString());
    }

    public void OnUpdateConnectorProperties(string prop, string Value)
    {
        if (!PreventPropertyChange)
        {
            ObservableCollection<DiagramConnector> Connectors = OnSelectedConnector();
            for (int i = 0; i < Connectors.Count; i++)
            {
                DiagramConnector Connector = Connectors[i];
                switch (prop)
                {
                    case "Type":
                        Connector.Type = (Value == "Straight") ? Segments.Straight : ((Value == "Orthogonal") ? Segments.Orthogonal : Segments.Bezier);
                        break;
                    case "StrokeColor":
                        ConnectorStrokeColor = Value;
                        Connector.Style.StrokeColor = Value;
                        StateHasChanged();
                        break;
                    case "StrokeDashArray":
                        Connector.Style.StrokeDashArray = Value;
                        UpdateConnectorStrokeValue(Value);
                        break;
                    case "StrokeWidth":
                        ConnectorStrokeWidth = Connector.Style.StrokeWidth = Connector.SourceDecorator.Style.StrokeWidth = Connector.TargetDecorator.Style.StrokeWidth = Double.Parse(Value);
                        break;
                    case "SourceDecoratorShape":
                        switch (Value)
                        {
                            case "None":
                                Connector.SourceDecorator.Shape = DecoratorShapes.None;
                                break;
                            case "Arrow":
                                Connector.SourceDecorator.Shape = DecoratorShapes.Arrow;
                                break;
                            case "Diamond":
                                Connector.SourceDecorator.Shape = DecoratorShapes.Diamond;
                                break;
                            case "OpenArrow":
                                Connector.SourceDecorator.Shape = DecoratorShapes.OpenArrow;
                                break;
                            case "Circle":
                                Connector.SourceDecorator.Shape = DecoratorShapes.Circle;
                                break;
                            case "Square":
                                Connector.SourceDecorator.Shape = DecoratorShapes.Square;
                                break;
                            case "Fletch":
                                Connector.SourceDecorator.Shape = DecoratorShapes.Fletch;
                                break;
                            case "OpenFetch":
                                Connector.SourceDecorator.Shape = DecoratorShapes.OpenFetch;
                                break;
                            case "IndentedArrow":
                                Connector.SourceDecorator.Shape = DecoratorShapes.IndentedArrow;
                                break;
                            case "OutdentedArrow":
                                Connector.SourceDecorator.Shape = DecoratorShapes.OutdentedArrow;
                                break;
                        }
                        break;
                    case "SourceDecoratorSize":
                        Connector.SourceDecorator.Width = Connector.SourceDecorator.Height = Int64.Parse(Value);
                        break;
                    case "TargetDecoratorShape":
                        switch (Value)
                        {
                            case "None":
                                Connector.TargetDecorator.Shape = DecoratorShapes.None;
                                break;
                            case "Arrow":
                                Connector.TargetDecorator.Shape = DecoratorShapes.Arrow;
                                break;
                            case "Diamond":
                                Connector.TargetDecorator.Shape = DecoratorShapes.Diamond;
                                break;
                            case "OpenArrow":
                                Connector.TargetDecorator.Shape = DecoratorShapes.OpenArrow;
                                break;
                            case "Circle":
                                Connector.TargetDecorator.Shape = DecoratorShapes.Circle;
                                break;
                            case "Square":
                                Connector.TargetDecorator.Shape = DecoratorShapes.Square;
                                break;
                            case "Fletch":
                                Connector.TargetDecorator.Shape = DecoratorShapes.Fletch;
                                break;
                            case "OpenFetch":
                                Connector.TargetDecorator.Shape = DecoratorShapes.OpenFetch;
                                break;
                            case "IndentedArrow":
                                Connector.TargetDecorator.Shape = DecoratorShapes.IndentedArrow;
                                break;
                            case "OutdentedArrow":
                                Connector.TargetDecorator.Shape = DecoratorShapes.OutdentedArrow;
                                break;
                        }
                        break;
                    case "TargetDecoratorSize":
                        Connector.TargetDecorator.Width = Connector.TargetDecorator.Height = Int64.Parse(Value);
                        break;
                    case "Bridging":
                        if (Value == "True")
                        {
                            Connector.Constraints |= ConnectorConstraints.Bridging;
                        }
                        else
                        {
                            Connector.Constraints &= ~ConnectorConstraints.Bridging;
                        }
                        break;
                    case "BridgeSpace":
                        Connector.BridgeSpace = Double.Parse(Value);
                        break;
                    case "Opacity":
                        Connector.Style.Opacity = Connector.SourceDecorator.Style.Opacity = Connector.TargetDecorator.Style.Opacity = Double.Parse(Value);
                        break;
                }
            }
        }
    }

    public ObservableCollection<DiagramConnector> OnSelectedConnector()
    {
        ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
        SfDiagram Diagram = Parent.DiagramContent.Diagram;
        DiagramSelectedItems SelectedItems = Diagram.SelectedItems;
        for (int i = 0; i < SelectedItems.Connectors.Count; i++)
        {
            ConnectorCollection.Add(Diagram.GetConnector(SelectedItems.Connectors[i].Id));
        }
        return ConnectorCollection;
    }

    // Page Settings
    public void OnPaperListValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, PaperListFields> args)
    {
        OnUpdateDiagramProperties("PaperList", args.Value);
    }

    public void OnPagePortraitChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        OnUpdateDiagramProperties("PagePortrait", args.Value.ToString());
    }

    public void OnPageLandscapeChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        OnUpdateDiagramProperties("PageLandscape", args.Value.ToString());
    }

    public void OnPageBgColorChange(ColorPickerEventArgs args)
    {
        PageBgColorValue =(args.CurrentValue).Hex;
        OnUpdateDiagramProperties("PageBgColor", (args.CurrentValue).Hex);
    }

    public void OnShowPageBreaksChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        OnUpdateDiagramProperties("ShowPageBreaks", args.Value.ToString());
    }

    public void OnPageWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        OnUpdateDiagramProperties("PageWidth", args.Value.ToString());
    }

    public void OnPageHeightChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        OnUpdateDiagramProperties("PageHeight", args.Value.ToString());
    }

    public void OnUpdateDiagramProperties(string prop, string Value)
    {
        SfDiagram Diagram = Parent.DiagramContent.Diagram;
        Diagram.BeginUpdate();
        if (!PreventPropertyChange)
        {
            switch (prop)
            {
                case "PageWidth":
                    Parent.DiagramContent.DiagramPageWidth = Double.Parse(Value);
                    break;;
                case "PageHeight":
                    Parent.DiagramContent.DiagramPageHeight = Double.Parse(Value);
                    break;
                case "PaperList":
                    double PageWidth;
                    double PageHeight;
                    if (Value == "Custom")
                    {
                        jsRuntime.InvokeAsync<object>("CustomPageSettingsChange", true);
                    }
                    else
                    {
                        jsRuntime.InvokeAsync<object>("CustomPageSettingsChange", false);
                        PaperSize paperSize = GetPaperSize(Value);
                        PageWidth = paperSize.PageWidth;
                        PageHeight = paperSize.PageHeight;
                        if (PageWidth > 0 && PageHeight > 0)
                        {
                            if (Diagram.PageSettings.Orientation == PageOrientation.Portrait)
                            {
                                if (PageWidth > PageHeight)
                                {
                                    double temp = PageWidth;
                                    PageWidth = PageHeight;
                                    PageHeight = temp;
                                }
                            }
                            else
                            {
                                if (PageHeight > PageWidth)
                                {
                                    double temp = PageHeight;
                                    PageHeight = PageWidth;
                                    PageWidth = temp;
                                }
                            }
                        }
                        Parent.DiagramContent.DiagramPageWidth = PageWidth;
                        Parent.DiagramContent.DiagramPageHeight = PageHeight;
                    }
                    break;
                case "PageLandscape":
                    Parent.DiagramContent.DiagramOrientation = (Value == "true") ? PageOrientation.Landscape : PageOrientation.Portrait;
                    break;
                case "PagePortrait":
                    Parent.DiagramContent.DiagramOrientation = (Value == "on") ? PageOrientation.Portrait : PageOrientation.Landscape;
                    break;
                case "PageBgColor":
                    Parent.DiagramContent.DiagramBgColor = Value;
                    break;
                case "ShowPageBreaks":
                    Parent.DiagramContent.DiagramShowPageBreaks = (Value == "True") ? true : false;
                    break;
            }
        }
        Diagram.EndUpdate();
        Parent.DiagramContent.StateChanged();
    }

    public PaperSize GetPaperSize(string paperName) {

        PaperSize Paper = new PaperSize();

        switch (paperName) {
            case "Letter":
                Paper.PageWidth = 816;
                Paper.PageHeight = 1056;
                break;
            case "Legal":
                Paper.PageWidth = 816;
                Paper.PageHeight = 1344;
                break;
            case "Tabloid":
                Paper.PageWidth = 1056;
                Paper.PageHeight = 1632;
                break;
            case "A3":
                Paper.PageWidth = 1122;
                Paper.PageHeight = 1587;
                break;
            case "A4":
                Paper.PageWidth = 793;
                Paper.PageHeight = 1122;
                break;
            case "A5":
                Paper.PageWidth = 559;
                Paper.PageHeight = 793;
                break;
            case "A6":
                Paper.PageWidth = 396;
                Paper.PageHeight = 559;
                break;
        }
        return Paper;
    }

    public class PaperSize
    {
        public double PageWidth { get; set; }
        public double PageHeight { get; set; }
    }

}